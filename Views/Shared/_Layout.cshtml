@using System.Security.Claims

<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    
    <!-- PWA Meta Tags -->
    <meta name="description" content="Sistema de Gestión de Compras y Pañol">
    <meta name="theme-color" content="#007bff">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="Pañol">
    <meta name="mobile-web-app-capable" content="yes">
    
    <!-- PWA Manifest -->
    <link rel="manifest" href="/manifest.json">
    
    <!-- Apple Touch Icons -->
    <link rel="apple-touch-icon" sizes="72x72" href="/icons/icon-72x72.png">
    <link rel="apple-touch-icon" sizes="96x96" href="/icons/icon-96x96.png">
    <link rel="apple-touch-icon" sizes="128x128" href="/icons/icon-128x128.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/icons/icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/icons/icon-152x152.png">
    <link rel="apple-touch-icon" sizes="192x192" href="/icons/icon-192x192.png">
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <link rel="icon" type="image/png" sizes="32x32" href="/images/logo.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/images/logo.png">
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            margin: 0;
        }

        .hero {
            background: linear-gradient(90deg, #007bff 0%, #00bcd4 100%);
            color: white;
            padding: 2rem 0;
            text-align: center;
        }

        .features .card {
            transition: transform 0.3s;
        }

        .features .card:hover {
            transform: scale(1.05);
        }

        footer {
            background-color: #343a40;
            color: white;
            text-align: center;
            padding: 1rem;
            margin-top: 4rem;
        }

        footer a {
            color: #00bcd4;
        }

        footer a:hover {
            text-decoration: underline;
        }

        .content {
            flex: 1 0 auto;
        }
    </style>
</head>

<body>

    <!-- Barra de Navegación -->
    <nav class="navbar navbar-expand-lg navbar-dark menu-container" style="background: linear-gradient(90deg, #007bff 0%, #00bcd4 100%);">
        <div class="container">
            <a class="navbar-brand" href="@Url.Action("Index", "Home")" style="color: white !important;">Gestión de Pañol</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarResponsive">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarResponsive">
                <ul class="navbar-nav ms-auto" style="color: white !important;">
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Index", "Home")" title="Página Principal del Sistema" style="color: white !important;">Inicio</a>
                    </li>
                    @if (User.IsInRole("Administrador"))
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="@Url.Action("Index", "FamiliaSubFamilia")" title="Gestión de Familias, Subfamilias e Items" style="color: white !important;">Maestro</a>
                        </li>
                    }
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="materialesDropdown" role="button"
                            data-bs-toggle="dropdown" aria-expanded="false" title="Movimientos de Inventario" style="color: white !important;"> Movimientos </a>
                        <ul class="dropdown-menu" aria-labelledby="materialesDropdown">
                            <li><a class="dropdown-item" href="@Url.Action("Index", "Ingreso")" title="Registrar Ingresos de Materiales">Ingreso</a></li>
                            <li><a class="dropdown-item" href="@Url.Action("Index", "Salida")" title="Registrar Salidas de Materiales">Egreso</a></li>
                            <li><a class="dropdown-item" href="@Url.Action("Index", "Devolucion")" title="Registrar Devoluciones de Materiales">Devolución</a></li>
                            <li><a class="dropdown-item" href="@Url.Action("Lista", "Pedido")" title="Pedidos">Pedido</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="@Url.Action("Index", "StockHistorico")" title="Consultar Stock en Fechas Pasadas"><i class="fas fa-calendar-alt me-2"></i>Stock Histórico</a></li>
                        </ul>
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Buscador", "Item")" target="_blank" title="Buscar y Consultar Items" style="color: white !important;">Items</a>
                    </li>
                    </li>
                    @if (User.IsInRole("Administrador"))
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="@Url.Action("Index", "Ajuste")" title="Realizar Ajustes de Stock" style="color: white !important;">Ajustes</a>
                        </li>
                    }
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Index", "Personal")" title="Lista y Alta de Personal" style="color: white !important;">Personal</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Index", "Proveedor")" title="Lista y Alta de Proveedores" style="color: white !important;">Proveedores</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="@Url.Action("Index", "Kardex")" title="Historial de Movimientos de Stock" style="color: white !important;">Kardex</a>
                    </li>
                    @if (User.Identity.IsAuthenticated)
                    {
                        var givenName = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName)?.Value;
                        var surname = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Surname)?.Value;

                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false" style="color: white !important;">
                                <i class="fas fa-user-circle"></i> @givenName @surname
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                                @if (User.Identity.IsAuthenticated)
                                {
                                    var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                                    <li><a class="dropdown-item" href="@Url.Action("CambiarPassword", "Autenticacion", new { id = userId })"><i class="fas fa-key me-2"></i>Cambiar Contraseña</a></li>
                                }
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item text-danger" href="@Url.Action("Logout", "Autenticacion")"><i class="fas fa-power-off me-2"></i>Cerrar Sesión</a></li>
                            </ul>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="@Url.Action("Login", "Autenticacion")" style="color: white !important;">Iniciar sesión</a>
                        </li>
                    }

                </ul>
            </div>
        </div>
    </nav>

    <!-- Contenido principal -->
    <div class="container mt-4 content">
        @RenderBody() <!-- Carga el contenido de las vistas específicas -->
    </div>

    <!-- Footer Condicional -->
    @if (!(ViewContext.RouteData.Values["controller"].ToString().Equals("Autenticacion",
    StringComparison.OrdinalIgnoreCase)
    && ViewContext.RouteData.Values["action"].ToString().Equals("Login", StringComparison.OrdinalIgnoreCase)))
    {
        <footer>
            <p>&copy; 2024 Gestión de Pañol | <a href="@Url.Action("Privacy", "Home")" class="text-info">Política de privacidad</a></p>
        </footer>
    }

    <!-- Incluir jQuery y Select2 JS -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    @RenderSection("Scripts", required: false) <!-- Sección Scripts personalizada -->

    @if (Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") == "Development")
    {
        <!-- dotnet watch browser refresh (sólo visible en desarrollo) -->
        <script src="/_framework/aspnetcore-browser-refresh.js"></script>
    }

    <!-- PWA Service Worker Registration -->
    <script>
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/service-worker.js')
                    .then(registration => {
                        console.log('✅ Service Worker registrado:', registration.scope);
                        
                        // Verificar actualizaciones
                        registration.addEventListener('updatefound', () => {
                            const newWorker = registration.installing;
                            newWorker.addEventListener('statechange', () => {
                                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                                    // Nueva versión disponible
                                    if (confirm('Nueva versión disponible. ¿Actualizar ahora?')) {
                                        newWorker.postMessage({ type: 'SKIP_WAITING' });
                                        window.location.reload();
                                    }
                                }
                            });
                        });
                    })
                    .catch(error => {
                        console.log('❌ Error al registrar Service Worker:', error);
                    });
            });

            // Recargar cuando el service worker tome control
            let refreshing;
            navigator.serviceWorker.addEventListener('controllerchange', () => {
                if (refreshing) return;
                refreshing = true;
                window.location.reload();
            });
        }

        // Detectar instalación de PWA
        let deferredPrompt;
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
            
            // Mostrar botón de instalación personalizado (opcional)
            console.log('💡 PWA instalable detectada');
        });

        window.addEventListener('appinstalled', () => {
            console.log('✅ PWA instalada exitosamente');
            deferredPrompt = null;
        });

        // Detectar si es PWA instalada
        const isPWA = window.matchMedia('(display-mode: standalone)').matches || 
                      window.navigator.standalone === true;
        
        if (isPWA) {
            console.log('🚀 Ejecutando como PWA');
        }
    </script>

    <script>
        // Cerrar sesión SOLO al cerrar la ventana/pestaña (NO al navegar entre páginas)
        let navegacionInterna = false;
        
        // Detectar navegación interna (clicks en links de la aplicación)
        document.addEventListener('click', function(e) {
            const link = e.target.closest('a');
            if (link && link.href && link.href.startsWith(window.location.origin)) {
                navegacionInterna = true;
                setTimeout(() => navegacionInterna = false, 100);
            }
        });
        
        // Detectar envío de formularios
        document.addEventListener('submit', function() {
            navegacionInterna = true;
            setTimeout(() => navegacionInterna = false, 100);
        });
        
        // Solo cerrar sesión si NO es navegación interna
        window.addEventListener('beforeunload', function(e) {
            // Si es navegación interna, NO cerrar sesión
            if (navegacionInterna) {
                return;
            }
            
            // Cerrar sesión al cerrar ventana/pestaña
            const logoutUrl = '@Url.Action("LogoutPost", "Autenticacion")';
            
            if (navigator.sendBeacon) {
                navigator.sendBeacon(logoutUrl);
            } else {
                var xhr = new XMLHttpRequest();
                xhr.open('POST', logoutUrl, false);
                xhr.send();
            }
        });
    </script>
</body>


</html>
