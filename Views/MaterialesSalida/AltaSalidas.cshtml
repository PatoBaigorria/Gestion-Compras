@model Gestion_Compras.Models.Salida
@using Gestion_Compras.Models

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Registrar Salidas";
    var personalList = ViewBag.PersonalList as List<Personal>;
    var itemList = ViewBag.ItemList as List<Item>;
}

<style>
    .container-custom {
        width: 100%;
        padding-right: 15px;
        padding-left: 15px;
        margin-right: auto;
        margin-left: auto;
        max-width: 1400px;
    }

    .table-responsive {
        position: relative;
    }

    .table-header {
        position: sticky;
        top: 0;
        z-index: 1020;
        background-color: white;
    }

    /* Estilos de cards */
    .card-formulario .card-body {
        padding: 1rem;
    }

    .card-formulario .card-title {
        color: #495057;
        font-size: 1.1rem;
    }

    /* Reducir el tamaño de la letra en la tabla */
    .table-sm td,
    .table-sm th {
        font-size: 0.9em;
        text-align: center;
        vertical-align: middle;
    }

    /* Hover effect en las filas */
    .table-hover tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.075);
    }
</style>

<div class="container-custom mt-3">

    <!-- Contenedores para mensajes -->
    <div id="successMessageContainer" class="mb-3"></div>
    <div id="errorMessageContainer" class="mb-3"></div>

    <!-- Modal de Error -->
    <div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="errorModalLabel">Error</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="errorModalBody">
                    <!-- Mensaje de error -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Card de Formulario -->
    <div class="card shadow mb-3 card-formulario">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="card-title mb-0">
                    <i class="fas fa-sign-out-alt me-2"></i>Registrar Salidas de Materiales
                </h5>
                <a href="@Url.Action("Index", "Salida")" class="btn btn-outline-secondary btn-sm">
                    <i class="fas fa-arrow-left me-2"></i>Volver a la Lista
                </a>
            </div>
            
            <form id="salidaForm" class="row g-3">
                @Html.AntiForgeryToken()
                <div class="col-md-3">
                    <label for="itemCodigo" class="form-label">Código del Ítem</label>
                    <input type="text" class="form-control form-control-sm" id="itemCodigo" oninput="limpiarError('itemCodigo')" style="text-transform: uppercase;" />
                    <div id="itemCodigoError" class="text-danger"></div>
                </div>
                <div class="col-md-2">
                    <label for="cantidad" class="form-label">Cantidad</label>
                    <input type="number" class="form-control form-control-sm" id="cantidad" step="0.01" min="0.01" oninput="limpiarError('cantidad')" />
                    <div id="cantidadError" class="text-danger"></div>
                </div>
                <div class="col-md-3">
                    <label for="personalId" class="form-label">Personal</label>
                    <select class="form-control form-control-sm" id="personalId" onchange="limpiarError('personalId')">
                        <option value="">Selecciona Personal</option>
                        @foreach (var persona in personalList)
                        {
                            <option value="@persona.Id">@persona.NombreYApellido</option>
                        }
                    </select>
                    <div id="personalIdError" class="text-danger"></div>
                </div>
                <div class="col-md-2">
                    <label for="fecha" class="form-label">Fecha Vale</label>
                    <input type="date" class="form-control form-control-sm" id="fecha"
                        onchange="limpiarError('fecha'); hacerNoEditable('fecha')" />
                    <div id="fechaError" class="text-danger"></div>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="button" class="btn btn-success btn-sm" onclick="agregarSalida()">
                        <i class="fas fa-plus me-2"></i>Agregar Salida
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Card de Lista de Salidas -->
    <div class="card shadow mb-0">
        <div class="card-header bg-light d-flex align-items-center justify-content-between">
            <strong>Lista de Salidas Pendientes</strong>
            <div class="d-flex gap-2">
                <button type="button" class="btn btn-primary btn-sm" onclick="registrarSalidas()">
                    <i class="fas fa-save me-2"></i>Registrar Salidas
                </button>
                <a href="@Url.Action("Index", "Salida")" class="btn btn-secondary btn-sm">
                    <i class="fas fa-times me-2"></i>Cancelar
                </a>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive" style="height: 400px; overflow-y: auto;">
                <table class="table table-striped table-bordered table-hover text-center table-sm mb-0">
                    <thead class="table-header">
                        <tr>
                            <th style="width: 15%;">Código</th>
                            <th style="width: 30%;">Descripción</th>
                            <th style="width: 10%;">Cantidad</th>
                            <th style="width: 25%;">Personal</th>
                            <th style="width: 15%;">Fecha Vale</th>
                            <th style="width: 5%;">Acción</th>
                        </tr>
                    </thead>
                    <tbody id="listaSalidas"></tbody>
                </table>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js"></script>
    <!-- Select2 CSS y JS -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <!-- Incluir FontAwesome para los íconos -->

    <script>
        // Función para formatear números (mostrar decimales solo si existen)
        function formatearNumero(num) {
            return num % 1 === 0 ? num.toFixed(0) : num.toFixed(2);
        }

        var salidas = [];
        var fechaFijada = ""; // Variable para mantener la fecha fijada

        // Inicializar Select2 para el select de personal
        $(document).ready(function() {
            $('#personalId').select2({
                theme: 'bootstrap-5',
                width: '100%',
                placeholder: 'Selecciona Personal',
                allowClear: true,
                selectOnClose: false,
                language: {
                    noResults: function() {
                        return "No se encontraron resultados";
                    },
                    searching: function() {
                        return "Buscando...";
                    }
                }
            });
            
            // Permitir borrar en el campo de búsqueda con backspace
            $('#personalId').on('select2:opening', function(e) {
                setTimeout(function() {
                    $('.select2-search__field').attr('contenteditable', 'true');
                }, 0);
            });
            
            // Limpiar error cuando se selecciona un personal
            $('#personalId').on('change', function() {
                limpiarError('personalId');
            });
        });

        function mostrarError(campo, mensaje) {
            document.getElementById(campo + "Error").textContent = mensaje;
        }

        function mostrarMensajeError(mensaje) {
            var errorMessageContainer = document.getElementById("errorMessageContainer");
            errorMessageContainer.innerHTML = `<div class="alert alert-danger">${mensaje}</div>`;
            setTimeout(function () {
                errorMessageContainer.innerHTML = "";
            }, 5000); // El mensaje desaparecerá después de 5 segundos
        }

        function mostrarMensajeExito(mensaje) {
            var successMessageContainer = document.getElementById("successMessageContainer");
            successMessageContainer.innerHTML = `<div class="alert alert-success">${mensaje}</div>`;
            setTimeout(function () {
                successMessageContainer.innerHTML = "";
            }, 5000); // El mensaje desaparecerá después de 5 segundos
        }

        function limpiarErrores() {
            ["itemCodigo", "cantidad", "fecha", "personalId"].forEach(function (campo) {
                document.getElementById(campo + "Error").textContent = "";
            });
        }

        function limpiarError(campo) {
            document.getElementById(campo + "Error").textContent = "";
        }

        function hacerNoEditable(campo) {
            var fechaInput = document.getElementById(campo);
            if (fechaFijada === "") {
                fechaFijada = fechaInput.value; // Fijar la fecha una vez
                fechaInput.setAttribute("readonly", true);
                fechaInput.style.backgroundColor = "#e9ecef"; // Cambiar el color de fondo a gris claro
            }
        }

        function limpiarCampos() {
            document.getElementById("itemCodigo").value = "";
            document.getElementById("cantidad").value = "";
            // Limpiar Select2 correctamente
            $('#personalId').val(null).trigger('change');
            // No limpiar la fecha para mantenerla fija
        }

        function formatearFecha(fecha) {
            var partes = fecha.split("-");
            return `${partes[2]}/${partes[1]}/${partes[0]}`;
        }

        async function buscarItem(codigo) {
            const response = await fetch(`/Salida/BuscarItemPorCodigo?codigo=${codigo}`);
            if (response.ok) {
                const item = await response.json();
                return item;
            } else {
                const errorData = await response.json();
                mostrarMensajeError(errorData.error);
                return null;
            }
        }

        async function agregarSalida() {
            limpiarErrores();

            var itemCodigo = document.getElementById("itemCodigo").value.trim().toUpperCase();
            var cantidad = parseFloat(document.getElementById("cantidad").value);
            var personalId = document.getElementById("personalId").value;
            var fecha = document.getElementById("fecha").value;

            if (itemCodigo === "") {
                mostrarError("itemCodigo", "Por favor, ingresa un código de ítem válido.");
                return;
            }

            if (!cantidad || cantidad <= 0) {
                mostrarError("cantidad", "Por favor, ingresa una cantidad válida.");
                return;
            }

            if (personalId === "" || personalId === null) {
                mostrarError("personalId", "Por favor, selecciona un personal.");
                return;
            }

            if (fecha === "") {
                mostrarError("fecha", "Por favor, selecciona una fecha.");
                return;
            }

            console.log("ItemCodigo ingresado:", itemCodigo); // Verificar el código del ítem ingresado
            var item = await buscarItem(itemCodigo);
            if (!item) {
                mostrarModalError("El código del ítem no existe.");
                return;
            }
            console.log("Item encontrado:", item); // Verificar el ítem encontrado

            var descripcion = item.descripcion;
            var personalText = document.getElementById("personalId").options[document.getElementById("personalId").selectedIndex].text;

            salidas.push({
                ItemCodigo: itemCodigo,
                Cantidad: cantidad,
                PersonalId: parseInt(personalId),
                FechaVale: fecha,
                ItemId: item.Id,
                Descripcion: descripcion
            });

            // Limpiar los campos, pero mantener la fecha
            limpiarCampos();

            // Formatear fecha
            var fechaFormateada = formatearFecha(fecha);

            // Actualiza la lista de salidas
            var listaSalidas = document.getElementById("listaSalidas");
            var tr = document.createElement("tr");
            tr.innerHTML = `<td>${itemCodigo}</td><td>${descripcion}</td><td>${formatearNumero(parseFloat(cantidad))}</td><td>${personalText}</td><td>${fechaFormateada}</td><td class="text-center align-middle"><button class="btn btn-danger btn-sm" title="Borrar Fila" onclick="borrarFila(this)"><i class="fas fa-trash-alt"></i></button></td>`;
            listaSalidas.appendChild(tr);
        }

        function borrarFila(button) {
            // Eliminar la fila de la tabla
            var row = button.parentNode.parentNode;
            row.parentNode.removeChild(row);

            // También deberíamos eliminar la salida correspondiente de la lista 'salidas'
            var itemCodigo = row.cells[0].textContent;
            salidas = salidas.filter(s => s.ItemCodigo !== itemCodigo);
        }

        async function registrarSalidas() {
            if (salidas.length === 0) {
                mostrarMensajeError("No hay ítems en la lista para registrar.");
                return;
            }

            const salidasDto = salidas.map(s => ({
                ItemCodigo: s.ItemCodigo,
                Cantidad: s.Cantidad,
                PersonalId: s.PersonalId,
                FechaVale: s.FechaVale,
                ItemId: s.ItemId
            }));

            $.ajax({
                url: '/Salida/Create',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(salidasDto),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    mostrarMensajeExito(response.message);
                    
                    // Notificar a otras ventanas que hay un nuevo movimiento
                    localStorage.setItem('ultimoMovimientoStock', Date.now().toString());
                    
                    // Limpiar la lista y resetear el formulario
                    salidas = [];
                    document.getElementById('listaSalidas').innerHTML = '';
                    fechaFijada = '';
                    document.getElementById('fecha').removeAttribute('readonly');
                    document.getElementById('fecha').style.backgroundColor = '';
                    document.getElementById('fecha').value = '';
                    limpiarCampos();
                    
                    // Resetear el select de personal
                    $('#personalId').val('').trigger('change');
                },
                error: function (xhr, status, errorThrown) {
                    console.error('Error al registrar salidas:', xhr.responseText);
                    let mensaje = 'Error al registrar salidas';
                    if (xhr.responseJSON && xhr.responseJSON.error) {
                        mensaje = xhr.responseJSON.error;
                    } else if (xhr.responseJSON && xhr.responseJSON.message) {
                        mensaje = xhr.responseJSON.message;
                    }
                    mostrarMensajeError(mensaje);
                }
            });
        }




        function mostrarModalError(mensaje) {
            document.getElementById("errorModalBody").innerText = mensaje;
            var errorModal = new bootstrap.Modal(document.getElementById('errorModal'), {});
            errorModal.show();

            // Limpiar campos al cerrar el modal
            errorModal._element.addEventListener('hidden.bs.modal', function () {
                limpiarCampos();
            });
        }
    </script>
}
