@model Gestion_Compras.Models.Salida
@using Gestion_Compras.Models

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Registrar Salidas";
    var personalList = ViewBag.PersonalList as List<Personal>;
    var itemList = ViewBag.ItemList as List<Item>;
}

<h3>Registrar Salidas</h3>

<div id="successMessageContainer" class="mb-3"></div> <!-- Contenedor para el mensaje de éxito -->
<div id="errorMessageContainer" class="mb-3"></div> <!-- Contenedor para el mensaje de error -->

<!-- Modal de Error -->
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="errorModalLabel">Error</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="errorModalBody">
                <!-- Mensaje de error -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<form id="salidaForm" class="row g-2">
    @Html.AntiForgeryToken()
    <div class="col-md-3">
        <label for="itemCodigo" class="form-label">Código del Ítem</label>
        <input type="text" class="form-control form-control-sm" id="itemCodigo" oninput="limpiarError('itemCodigo')" />
        <div id="itemCodigoError" class="text-danger"></div>
    </div>
    <div class="col-md-3">
        <label for="cantidad" class="form-label">Cantidad</label>
        <input type="number" class="form-control form-control-sm" id="cantidad" oninput="limpiarError('cantidad')" />
        <div id="cantidadError" class="text-danger"></div>
    </div>
    <div class="col-md-3">
        <label for="personalId" class="form-label">Personal</label>
        <select class="form-control form-control-sm" id="personalId" onchange="limpiarError('personalId')">
            <option value="">Selecciona Personal</option> <!-- Opción por defecto -->
            @foreach (var persona in personalList)
            {
                <option value="@persona.Id">@persona.NombreYApellido</option>
            }
        </select>
        <div id="personalIdError" class="text-danger"></div>
    </div>
    <div class="col-md-3">
        <label for="fecha" class="form-label">Fecha</label>
        <input type="date" class="form-control form-control-sm" id="fecha"
            onchange="limpiarError('fecha'); hacerNoEditable('fecha')" />
        <div id="fechaError" class="text-danger"></div>
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <button type="button" class="btn btn-success" onclick="agregarSalida()">Agregar Salida</button>
    </div>
</form>

<h4 class="mt-4">Lista de Salidas</h4>

<table class="table table-striped table-bordered">
    <thead class="text-center">
        <tr>
            <th>Código del Ítem</th>
            <th>Descripción</th>
            <th>Cantidad</th>
            <th>Personal</th>
            <th>Fecha</th>
            <th>Acción</th>
        </tr>
    </thead>
    <tbody id="listaSalidas"></tbody>
</table>

<button type="button" class="btn btn-primary" onclick="registrarSalidas()">Registrar Salidas</button>
<a href="/Salida/Index" class="btn btn-secondary">Cancelar</a>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js"></script>
    <!-- Incluir FontAwesome para los íconos -->

    <script>
        var salidas = [];
        var fechaFijada = ""; // Variable para mantener la fecha fijada

        function mostrarError(campo, mensaje) {
            document.getElementById(campo + "Error").textContent = mensaje;
        }

        function mostrarMensajeError(mensaje) {
            var errorMessageContainer = document.getElementById("errorMessageContainer");
            errorMessageContainer.innerHTML = `<div class="alert alert-danger">${mensaje}</div>`;
            setTimeout(function () {
                errorMessageContainer.innerHTML = "";
            }, 5000); // El mensaje desaparecerá después de 5 segundos
        }

        function mostrarMensajeExito(mensaje) {
            var successMessageContainer = document.getElementById("successMessageContainer");
            successMessageContainer.innerHTML = `<div class="alert alert-success">${mensaje}</div>`;
            setTimeout(function () {
                successMessageContainer.innerHTML = "";
            }, 5000); // El mensaje desaparecerá después de 5 segundos
        }

        function limpiarErrores() {
            ["itemCodigo", "cantidad", "fecha", "personalId"].forEach(function (campo) {
                document.getElementById(campo + "Error").textContent = "";
            });
        }

        function limpiarError(campo) {
            document.getElementById(campo + "Error").textContent = "";
        }

        function hacerNoEditable(campo) {
            var fechaInput = document.getElementById(campo);
            if (fechaFijada === "") {
                fechaFijada = fechaInput.value; // Fijar la fecha una vez
                fechaInput.setAttribute("readonly", true);
                fechaInput.style.backgroundColor = "#e9ecef"; // Cambiar el color de fondo a gris claro
            }
        }

        function limpiarCampos() {
            document.getElementById("itemCodigo").value = "";
            document.getElementById("cantidad").value = "";
            document.getElementById("personalId").selectedIndex = 0;
            // No limpiar la fecha para mantenerla fija
        }

        function formatearFecha(fecha) {
            var partes = fecha.split("-");
            return `${partes[2]}/${partes[1]}/${partes[0]}`;
        }

        async function buscarItem(codigo) {
            const response = await fetch(`/Salida/BuscarItemPorCodigo?codigo=${codigo}`);
            if (response.ok) {
                const item = await response.json();
                return item;
            } else {
                const errorData = await response.json();
                mostrarMensajeError(errorData.error);
                return null;
            }
        }

        async function agregarSalida() {
            limpiarErrores();

            var itemCodigo = document.getElementById("itemCodigo").value.trim();
            var cantidad = parseInt(document.getElementById("cantidad").value);
            var personalId = document.getElementById("personalId").value;
            var fecha = document.getElementById("fecha").value;

            if (itemCodigo === "") {
                mostrarError("itemCodigo", "Por favor, ingresa un código de ítem válido.");
                return;
            }

            if (!cantidad || cantidad <= 0) {
                mostrarError("cantidad", "Por favor, ingresa una cantidad válida.");
                return;
            }

            if (personalId === "") {
                mostrarError("personalId", "Por favor, selecciona un personal.");
                return;
            }

            if (fecha === "") {
                mostrarError("fecha", "Por favor, selecciona una fecha.");
                return;
            }

            console.log("ItemCodigo ingresado:", itemCodigo); // Verificar el código del ítem ingresado
            var item = await buscarItem(itemCodigo);
            if (!item) {
                mostrarModalError("El código del ítem no existe.");
                return;
            }
            console.log("Item encontrado:", item); // Verificar el ítem encontrado

            var descripcion = item.descripcion;
            var personalText = document.getElementById("personalId").options[document.getElementById("personalId").selectedIndex].text;

            salidas.push({
                ItemCodigo: itemCodigo,
                Cantidad: cantidad,
                PersonalId: parseInt(personalId),
                Fecha: fecha,
                ItemId: item.Id,
                Descripcion: descripcion
            });

            // Limpiar los campos, pero mantener la fecha
            limpiarCampos();

            // Formatear fecha
            var fechaFormateada = formatearFecha(fecha);

            // Actualiza la lista de salidas
            var listaSalidas = document.getElementById("listaSalidas");
            var tr = document.createElement("tr");
            tr.innerHTML = `<td>${itemCodigo}</td><td>${descripcion}</td><td>${cantidad}</td><td>${personalText}</td><td>${fechaFormateada}</td><td class="text-center align-middle"><button class="btn btn-danger btn-sm" title="Borrar Fila" onclick="borrarFila(this)"><i class="fas fa-trash-alt"></i></button></td>`;
            listaSalidas.appendChild(tr);
        }

        function borrarFila(button) {
            // Eliminar la fila de la tabla
            var row = button.parentNode.parentNode;
            row.parentNode.removeChild(row);

            // También deberíamos eliminar la salida correspondiente de la lista 'salidas'
            var itemCodigo = row.cells[0].textContent;
            salidas = salidas.filter(s => s.ItemCodigo !== itemCodigo);
        }

        async function registrarSalidas() {
            if (salidas.length === 0) {
                mostrarMensajeError("No hay ítems en la lista para registrar.");
                return;
            }

            const salidasDto = salidas.map(s => ({
                ItemCodigo: s.ItemCodigo,
                Cantidad: s.Cantidad,
                PersonalId: s.PersonalId,
                Fecha: s.Fecha,
                ItemId: s.ItemId
            }));

            $.ajax({
                url: '/Salida/Create',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(salidasDto),
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    mostrarMensajeExito(response.message);
                    setTimeout(function () {
                        location.reload();
                    }, 1000);
                },
                error: function (xhr, status, errorThrown) {
                    console.error('Error al registrar salidas:', xhr.responseText);
                    mostrarMensajeError('Error al registrar salidas: ' + xhr.responseText);
                }
            });
        }




        function mostrarModalError(mensaje) {
            document.getElementById("errorModalBody").innerText = mensaje;
            var errorModal = new bootstrap.Modal(document.getElementById('errorModal'), {});
            errorModal.show();

            // Limpiar campos al cerrar el modal
            errorModal._element.addEventListener('hidden.bs.modal', function () {
                limpiarCampos();
            });
        }
    </script>
}
