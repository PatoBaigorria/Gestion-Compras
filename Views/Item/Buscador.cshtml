@model Gestion_Compras.ViewModels.FamiliaSubFamiliaViewModel
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService

@{
    Layout = "~/Views/Shared/_LayoutPopup.cshtml";
    ViewData["Title"] = "Buscador de Items";
}

<div class="container-custom mt-3">

    <!-- Filtros de Búsqueda -->
    <div class="row mb-3">
        <div class="col-md-4 col-lg-2">
            <label for="codigoItem" class="form-label">Código</label>
            <div class="input-group">
                <input type="text" id="codigoItem" name="Codigo" class="form-control" maxlength="10" />
            </div>
        </div>
        <div class="col-md-4 col-lg-2">
            <label for="familiaSelect" class="form-label">Familia</label>
            <select id="familiaSelect" name="familiaIds" class="form-select" multiple>
                @foreach (var familia in Model.FamiliaList)
                {
                    <option value="@familia.Id">@familia.Descripcion</option>
                }
            </select>
        </div>
        <div class="col-md-4 col-lg-2">
            <label for="subfamiliaSelect" class="form-label">Subfamilia</label>
            <select id="subfamiliaSelect" name="subFamiliaIds" class="form-select" multiple>
            </select>
        </div>
        <div class="col-md-8 col-lg-4">
            <label for="descripcionItem" class="form-label">Descripción Item</label>
            <div class="input-group">
                <input type="text" id="descripcionItem" name="Descripcion" class="form-control" />
                <button type="button" class="btn btn-primary" id="buscarItemsBtn" title="Buscar">
                    <i class="fas fa-search"></i>
                </button>
                <button type="button" class="btn btn-success" id="exportarBtn" title="Exportar">
                    <i class="fas fa-file-excel"></i>
                </button>
                <button type="button" class="btn btn-outline-secondary" id="imprimirBtn" title="Imprimir">
                    <i class="fas fa-print"></i>
                </button>
            </div>
        </div>
        <div class="col-md-4 col-lg-2">
            <label for="filtroComprar" class="form-label">Filtrar</label>
            <div class="form-check mt-2">
                <input class="form-check-input" type="checkbox" id="filtroComprar">
                <label class="form-check-label" for="filtroComprar">
                    <i class="fas fa-shopping-cart text-danger"></i> Solo comprar
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="filtroCritico">
                <label class="form-check-label" for="filtroCritico">
                    <i class="fas fa-exclamation-triangle text-warning"></i> Solo críticos
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="filtroActivo" checked>
                <label class="form-check-label" for="filtroActivo">
                    <i class="fas fa-check-circle text-success"></i> Solo activos
                </label>
            </div>
        </div>
    </div>

    <!-- Resultados de la Búsqueda -->
    <div class="row">
        <div class="col">
            <div class="table-responsive" style="height: 600px; overflow-y: auto;">
                <table class="table table-striped table-bordered table-hover text-center table-sm">
                    <thead class="table-light sticky-top">
                        <tr>
                            <th style="width: 80px;">Código</th>
                            <th style="width: 12%;">Familia</th>
                            <th style="width: 15%;">Subfamilia</th>
                            <th style="width: 32%;">Descripción Items</th>
                            <th style="width: 80px;">Stock</th>
                            <th style="width: 150px;">Punto de Pedido</th>
                            <th style="width: 80px;">Cant. Pedidos</th>
                            <th style="width: 180px;">Unidad de Medida</th>
                            <th style="width: 90px;">Precio</th>
                            <th style="width: 70px;">Crítico</th>
                            <th style="width: 70px;">Activo</th>
                            <th style="width: 100px;">Comprar</th>
                            <th style="width: 80px;">Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="resultadosBusqueda">
                        <!-- Resultados irán aquí -->
                    </tbody>
                </table>
            </div>
            <!-- ← AGREGAR ESTO: CONTROLES DE PAGINACIÓN -->
            <div id="paginacion" class="d-flex justify-content-center mt-3">
                <nav>
                    <ul class="pagination pagination-sm">
                        <li class="page-item" id="btnAnterior">
                            <a class="page-link" href="#" onclick="cambiarPagina(-1); return false;">
                                ← Anterior
                            </a>
                        </li>
                        <li class="page-item">
                            <span class="page-link text-muted" id="infoPagina">
                                Página 1 de 1
                            </span>
                        </li>
                        <li class="page-item" id="btnSiguiente">
                            <a class="page-link" href="#" onclick="cambiarPagina(1); return false;">
                                Siguiente →
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>

    <!-- Modal para editar ítem -->
    <div class="modal fade" id="editarItemModal" tabindex="-1" aria-labelledby="editarItemModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="editarItemModalLabel">Editar Ítem</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    <form id="formEditarItem">
                        <input type="hidden" id="itemId" name="Id" />
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editCodigo" class="form-label">Código</label>
                                <input type="text" class="form-control" id="editCodigo" name="Codigo" required />
                            </div>
                            <div class="col-md-6">
                                <label for="editDescripcion" class="form-label">Descripción</label>
                                <input type="text" class="form-control" id="editDescripcion" name="Descripcion"
                                    required />
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editFamilia" class="form-label">Familia</label>
                                <select class="form-select" id="editFamilia" name="FamiliaId" required>
                                    @foreach (var familia in Model.FamiliaList)
                                    {
                                        <option value="@familia.Id">@familia.Descripcion</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="editSubfamilia" class="form-label">Subfamilia</label>
                                <select class="form-select" id="editSubfamilia" name="SubFamiliaId" required>
                                    <!-- Se llenará dinámicamente -->
                                </select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="editPrecio" class="form-label">Precio</label>
                                <input type="number" step="0.01" class="form-control" id="editPrecio" name="Precio"
                                    required />
                            </div>
                            <div class="col-md-4">
                                <label for="editPuntoPedido" class="form-label">Punto de Pedido</label>
                                <input type="number" class="form-control" id="editPuntoPedido" name="PuntoDePedido"
                                    required />
                            </div>
                            <div class="col-md-4">
                                <label for="editUnidadMedida" class="form-label">Unidad de Medida</label>
                                <select class="form-select" id="editUnidadMedida" name="UnidadDeMedidaId" required>
                                    <!-- Se llenará dinámicamente -->
                                </select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="editCritico" name="Critico">
                                    <label class="form-check-label" for="editCritico">
                                        Ítem Crítico
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="editActivo" name="Activo"
                                        checked>
                                    <label class="form-check-label" for="editActivo">
                                        Ítem Activo
                                    </label>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" id="btnGuardarCambios">Guardar Cambios</button>
                </div>
            </div>
        </div>
    </div>
    <style>
        .container-custom {
            width: 100%;
            padding-right: 15px;
            padding-left: 15px;
            margin-right: auto;
            margin-left: auto;
            max-width: 1400px;
            /* Un poco más ancho que el container estándar (1200px) */
        }

        /* Mejorar apariencia de paginación */
        #paginacion {
            margin: 20px 0;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 5px;
        }

        #paginacion .page-link {
            padding: 0.4rem 0.75rem;
            font-size: 0.9rem;
        }

        #infoPagina {
            min-width: 150px;
            display: inline-block;
            text-align: center;
        }

        .table-responsive {
            position: relative;
        }

        .table-header {
            position: sticky;
            top: 0;
            z-index: 1020;
            background-color: white;
            /* Asegúrate de que el fondo sea blanco */
        }

        /* Reducir el tamaño de la letra en la tabla */
        .table-sm td,
        .table-sm th {
            font-size: 0.9em;
        }

        /* SweetAlert2: versión compacta y más ancha */
        .swal2-popup.swal-compact {
            padding-top: 1.1rem;
            /* despegar contenido del borde superior */
        }

        .swal2-popup.swal-compact .swal2-icon {
            width: 2.8rem;
            /* icono más grande */
            height: 2.8rem;
            margin: 0.6rem auto 0.5rem auto;
            /* más espacio desde arriba */
            font-size: 1.4rem;
            /* contenido del icono más visible */
            border-width: 0.25rem;
            /* aro más grueso */
        }

        .swal2-popup.swal-compact .swal2-icon .swal2-icon-content {
            font-size: 1.35rem;
            /* acompaña al nuevo tamaño */
            font-weight: 800;
            /* exclamación más "negrita" */
            line-height: 2.6rem;
            /* centra dentro de 2.8rem */
            display: inline-block;
        }

        .swal2-popup.swal-compact .swal2-title {
            font-size: 1.05rem;
            line-height: 1.2;
            margin: 0.25rem 0 0.25rem 0;
        }

        .swal2-popup.swal-compact .swal2-html-container {
            font-size: 0.98rem;
            line-height: 1.25;
            margin: 0 0 0.5rem 0;
        }

        .swal2-popup.swal-compact .swal2-actions .swal2-styled {
            padding: 0.4rem 0.8rem;
            font-size: 0.9rem;
        }
    </style>

    @section Scripts {
        <script>
            $(document).ready(function () {
                // Cargar automáticamente la lista completa de ítems al iniciar
                buscarItems();

                // Utilidad: debounce para no disparar demasiadas llamadas
                function debounce(fn, delay) {
                    let t;
                    return function (...args) {
                        clearTimeout(t);
                        t = setTimeout(() => fn.apply(this, args), delay);
                    };
                }

                // Cargar SweetAlert2 dinámicamente si no está presente
                function ensureSwal() {
                    return new Promise((resolve) => {
                        if (typeof Swal !== 'undefined') {
                            return resolve();
                        }
                        // Agregar CSS
                        const existingCss = document.querySelector('link[data-swal]');
                        if (!existingCss) {
                            const link = document.createElement('link');
                            link.rel = 'stylesheet';
                            link.href = 'https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css';
                            link.setAttribute('data-swal', '1');
                            document.head.appendChild(link);
                        }
                        // Agregar script
                        const script = document.createElement('script');
                        script.src = 'https://cdn.jsdelivr.net/npm/sweetalert2@11';
                        script.onload = () => resolve();
                        document.head.appendChild(script);
                    });
                }

                // Inicializar Select2 para los elementos de selección en modo múltiple
                if (!$('#familiaSelect').hasClass('select2-hidden-accessible')) {
                    $('#familiaSelect').select2({
                        placeholder: 'Seleccionar familias',
                        closeOnSelect: false,
                        width: '100%'
                    });
                }

                if (!$('#subfamiliaSelect').hasClass('select2-hidden-accessible')) {
                    $('#subfamiliaSelect').select2({
                        placeholder: 'Seleccionar subfamilias',
                        closeOnSelect: false,
                        width: '100%'
                    });
                }

                // Cargar subfamilias al cambiar selección de familias (pueden ser varias)
                $('#familiaSelect').change(function () {
                    const familiasSeleccionadas = $(this).val() || [];
                    cargarSubfamiliasParaFamilias(familiasSeleccionadas);
                });

                // Cargar subfamilias para múltiples familias y unificar sin duplicados
                function cargarSubfamiliasParaFamilias(familiaIds) {
                    const $sub = $('#subfamiliaSelect');
                    const seleccionPrev = $sub.val() || [];

                    if (!familiaIds.length) {
                        $sub.empty();
                        $sub.trigger('change');
                        return;
                    }

                    // Realizar múltiples requests en paralelo y unir resultados
                    const requests = familiaIds.map(fid => $.ajax({
                        url: '/FamiliaSubFamilia/ObtenerSubfamilias/' + fid,
                        type: 'GET',
                        xhrFields: {
                            withCredentials: true
                        }
                    }));

                    Promise.all(requests)
                        .then(responses => {
                            // Unificar subfamilias por Id para evitar duplicados
                            const mapa = new Map();
                            responses.flat().forEach(sf => {
                                if (!mapa.has(sf.id)) {
                                    mapa.set(sf.id, sf);
                                }
                            });

                            $sub.empty();
                            Array.from(mapa.values()).forEach(sf => {
                                $sub.append(`<option value="${sf.id}">${sf.descripcion}</option>`);
                            });

                            // Restaurar selección previa que siga disponible
                            const restaurar = seleccionPrev.filter(v => mapa.has(parseInt(v)));
                            $sub.val(restaurar).trigger('change.select2');
                        })
                        .catch(err => {
                            console.error('Error al obtener subfamilias:', err);
                            $sub.empty();
                        });
                }

                // Función para buscar items (reutilizable)
                function buscarItems(pagina = 1) {
                    const codigo = $('#codigoItem').val() || '';
                    const familiaIds = $('#familiaSelect').val() || [];
                    const subFamiliaIds = $('#subfamiliaSelect').val() || [];
                    const descripcion = $('#descripcionItem').val() || '';

                    // Mostrar loading
                    $('#resultadosBusqueda').html('<tr><td colspan="13" class="text-center">Cargando...</td></tr>');

                    // Parámetros de paginación
                    const params = new URLSearchParams();
                    if (codigo) params.append('codigo', codigo);
                    familiaIds.forEach(id => params.append('familiaIds', id));
                    subFamiliaIds.forEach(id => params.append('subFamiliaIds', id));
                    if (descripcion) params.append('descripcion', descripcion);
                    params.append('pagina', pagina);           // ← NUEVO
                    params.append('tamanoPagina', 100);        // ← NUEVO

                    $.ajax({
                        url: '/Item/BuscarItems?' + params.toString(),
                        type: 'GET',
                        success: function (response) {
                            // ← CAMBIO IMPORTANTE: response.items en lugar de response
                            renderizarResultados(response.items);
                            aplicarFiltros();

                            // ← ACTUALIZAR PAGINACIÓN
                            actualizarPaginacion(response.total, response.pagina, response.tamanoPagina);
                        },
                        error: function (xhr) {
                            console.error('Error:', xhr.responseText);
                            $('#resultadosBusqueda').html('<tr><td colspan="13" class="text-center text-danger">Error al cargar</td></tr>');
                        }
                    });
                }

                // Variables globales para paginación
                let paginaActual = 1;
                let totalPaginas = 1;
                let totalItems = 0;

                function actualizarPaginacion(total, pagina, tamanoPagina) {
                    paginaActual = pagina;
                    totalItems = total;
                    totalPaginas = Math.ceil(total / tamanoPagina);

                    $('#infoPagina').text(`Página ${pagina} de ${totalPaginas} (${total} items)`);

                    // Habilitar/deshabilitar botones
                    $('#btnAnterior').toggleClass('disabled', pagina === 1);
                    $('#btnSiguiente').toggleClass('disabled', pagina >= totalPaginas);
                }

                // Event listeners para paginación - AGREGAR ESTO
                $(document).on('click', '#btnAnterior a', function (e) {
                    e.preventDefault();
                    cambiarPagina(-1);
                });

                $(document).on('click', '#btnSiguiente a', function (e) {
                    e.preventDefault();
                    cambiarPagina(1);
                });

                // Función para cambiar de página
                function cambiarPagina(direccion) {
                    const nuevaPagina = paginaActual + direccion;
                    if (nuevaPagina >= 1 && nuevaPagina <= totalPaginas) {
                        buscarItems(nuevaPagina);
                    }
                }
                // Función separada para renderizar rápido
                function renderizarResultados(items) {
                    const resultados = $('#resultadosBusqueda');
                    resultados.empty();

                    if (items.length === 0) {
                        resultados.html('<tr><td colspan="13" class="text-center">No se encontraron resultados</td></tr>');
                        return;
                    }

                    const fragment = document.createDocumentFragment();

                    items.forEach(item => {
                        const stockTotal = item.stock + item.cantidadEnPedidos;
                        const necesitaComprar = (item.stock < item.puntoDePedido) && (stockTotal < item.puntoDePedido);

                        const tr = document.createElement('tr');
                        tr.setAttribute('data-necesita-comprar', necesitaComprar);
                        tr.setAttribute('data-critico', item.critico);
                        tr.setAttribute('data-activo', item.activo);

                        tr.innerHTML = `
                                                                    <td>${item.codigo || ''}</td> 
                                                                    <td>${item.familiaDescripcion || ''}</td> 
                                                                    <td>${item.subFamiliaDescripcion || ''}</td> 
                                                                    <td style="text-align: left">${item.descripcion || ''}</td> 
                                                                    <td>${item.stock !== null ? item.stock : ''}</td> 
                                                                    <td>${item.puntoDePedido !== null ? item.puntoDePedido : ''}</td>
                                                                    <td>${item.cantidadEnPedidos !== null ? item.cantidadEnPedidos : '0'}</td>
                                                                    <td>${item.unidadDeMedidaAbreviatura || ''}</td>
                                                                    <td>${item.precio !== null ? item.precio : ''}</td>
                                                                    <td><input type="checkbox" ${item.critico ? 'checked' : ''} disabled></td>
                                                                    <td><input type="checkbox" ${item.activo ? 'checked' : ''} disabled></td>
                                                                    <td>${necesitaComprar ? '<i class="fas fa-shopping-cart text-danger" title="Necesita comprar"></i>' : '<span class="text-muted">-</span>'}</td>
                                                                    <td class="text-center">
                                                                        <button class="btn btn-sm btn-primary btn-editar" data-id="${item.id}" title="Editar ítem">
                                                                            <i class="fas fa-edit"></i>
                                                                        </button>
                                                                    </td>
                                                                `;

                        fragment.appendChild(tr);
                    });

                    resultados.append(fragment);
                }

                // Función para aplicar todos los filtros
                function aplicarFiltros() {
                    const filtroComprarActivo = $('#filtroComprar').is(':checked');
                    const filtroCriticoActivo = $('#filtroCritico').is(':checked');
                    const filtroActivoActivo = $('#filtroActivo').is(':checked');

                    $('#resultadosBusqueda tr').each(function () {
                        const necesitaComprar = $(this).data('necesita-comprar');
                        const esCritico = $(this).data('critico');
                        const estaActivo = $(this).data('activo') !== false;
                        let mostrar = true;

                        if (filtroComprarActivo && !necesitaComprar) {
                            mostrar = false;
                        }

                        if (filtroCriticoActivo && !esCritico) {
                            mostrar = false;
                        }

                        if (filtroActivoActivo && !estaActivo) {
                            mostrar = false;
                        }

                        if (mostrar) {
                            $(this).show();
                        } else {
                            $(this).hide();
                        }
                    });
                }

                // Manejar el botón de buscar
                $('#buscarItemsBtn').click(function () {
                    buscarItems();
                });

                // Exportar: si hay filtros aplicados, exportar lo visible; si no hay filtros, preguntar con SweetAlert2 exportar todo
                $('#exportarBtn').click(function () {
                    // Siempre exportar desde servidor para obtener datos frescos
                    ensureSwal().then(() => {
                        const swalWideSmallIcon = Swal.mixin({ width: '34rem', customClass: { popup: 'swal-compact' } });

                        if (tieneFiltrosAplicados()) {
                            swalWideSmallIcon.fire({
                                title: 'Exportar con Filtros',
                                html: '¿Desea exportar los resultados filtrados?',
                                icon: 'question',
                                showCancelButton: true,
                                confirmButtonText: 'Sí, exportar',
                                cancelButtonText: 'Cancelar'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    exportarDesdeServidor();
                                }
                            });
                        } else {
                            swalWideSmallIcon.fire({
                                title: 'Exportar Lista Completa',
                                html: 'No hay filtros aplicados. ¿Desea exportar <b>TODA</b> la lista completa?',
                                icon: 'warning',
                                iconColor: '#ffc107',
                                showCancelButton: true,
                                confirmButtonText: 'Sí, exportar',
                                cancelButtonText: 'Cancelar'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    exportarDesdeServidor();
                                }
                            });
                        }
                    });
                });

                // Imprimir: si hay filtros, imprimir lo visible; si no hay filtros, preguntar con SweetAlert2 imprimir todo
                $('#imprimirBtn').click(function () {
                    if (tieneFiltrosAplicados()) {
                        imprimirTablaVisible();
                    } else {
                        ensureSwal().then(() => {
                            const swalWideSmallIcon = Swal.mixin({ width: '34rem', customClass: { popup: 'swal-compact' } });
                            swalWideSmallIcon.fire({
                                title: 'Imprimir Lista Completa',
                                html: 'No hay filtros aplicados. ¿Desea imprimir <b>TODA</b> la lista completa?',
                                icon: 'warning',
                                iconColor: '#ffc107',
                                showCancelButton: true,
                                confirmButtonText: 'Sí, imprimir',
                                cancelButtonText: 'Cancelar'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    // Usar imprimirTablaVisible en lugar de imprimirTodoDesdeServidor
                                    // porque ahora los filtros son instantáneos
                                    imprimirTablaVisible();
                                }
                            });
                        });
                    }
                });

                // Manejar los filtros
                // Inputs de texto con debounce - VOLVER A PÁGINA 1
                $('#codigoItem, #descripcionItem').on('input', debounce(function () {
                    buscarItems(1); // ← Siempre página 1
                }, 400));

                // Selects - VOLVER A PÁGINA 1  
                $('#familiaSelect, #subfamiliaSelect').on('change', function () {
                    buscarItems(1); // ← Siempre página 1
                });

                // Checkboxes de filtro - estos son locales (NO llamar a buscarItems)
                $('#filtroComprar, #filtroCritico, #filtroActivo').on('change', function () {
                    aplicarFiltros(); // Solo aplicar filtros locales
                });

                // Botón de búsqueda - VOLVER A PÁGINA 1
                $('#buscarItemsBtn').click(function () {
                    buscarItems(1); // ← Siempre página 1
                });

                // Manejar clic en botón editar
                $(document).on('click', '.btn-editar', function () {
                    const itemId = $(this).data('id');
                    cargarDatosItem(itemId);
                });

                // Cargar datos del ítem a editar
                function cargarDatosItem(itemId) {
                    $.ajax({
                        url: '/Item/GetItemById?id=' + itemId,
                        type: 'GET',
                        success: function (item) {
                            if (!item || item.success === false) {
                                throw new Error(item?.message || 'Error al cargar el ítem');
                            }

                            // Llenar el formulario con los datos del ítem
                            $('#itemId').val(item.id);
                            $('#editCodigo').val(item.codigo || '');
                            $('#editDescripcion').val(item.descripcionItem || '');

                            // Manejar valores numéricos
                            $('#editPrecio').val(item.precio !== null ? item.precio : '');
                            $('#editPuntoPedido').val(item.puntoDePedido !== null ? item.puntoDePedido : '');

                            // Manejar checkboxes
                            $('#editCritico').prop('checked', Boolean(item.critico));
                            $('#editActivo').prop('checked', item.activo !== false);

                            // Cargar subfamilias y seleccionar la correcta
                            if (item.familiaId) {
                                $('#editFamilia').val(item.familiaId).trigger('change');
                                cargarSubfamiliasParaEdicion(item.familiaId, item.subFamiliaId || 0);
                            }

                            // Cargar unidades de medida
                            cargarUnidadesDeMedida(item.unidadDeMedidaId);

                            // Mostrar el modal
                            const modal = new bootstrap.Modal(document.getElementById('editarItemModal'));
                            modal.show();
                        },
                        error: function (xhr) {
                            console.error('Error al cargar el ítem:', xhr.responseText);
                            alert('Error al cargar los datos del ítem: ' + (xhr.responseJSON?.message || 'Error desconocido'));
                        }
                    });
                }

                // Cargar subfamilias para el formulario de edición
                function cargarSubfamiliasParaEdicion(familiaId, subFamiliaId) {
                    if (!familiaId) {
                        $('#editSubfamilia').empty().append('<option value="">Seleccione subfamilia</option>');
                        return;
                    }

                    $.ajax({
                        url: '/FamiliaSubFamilia/ObtenerSubfamilias/' + familiaId,
                        type: 'GET',
                        success: function (subfamilias) {
                            const $select = $('#editSubfamilia');
                            $select.empty();

                            // Agregar opción por defecto
                            $select.append(new Option('Seleccione subfamilia', '', true, !subFamiliaId));

                            if (subfamilias && subfamilias.length > 0) {
                                subfamilias.forEach(function (sf) {
                                    $select.append(new Option(sf.descripcion, sf.id, false, sf.id === subFamiliaId));
                                });
                            }
                        },
                        error: function (xhr) {
                            console.error('Error al cargar subfamilias:', xhr.responseText);
                            $('#editSubfamilia').empty().append('<option value="">Error cargando subfamilias</option>');
                        }
                    });
                }

                // Cargar unidades de medida
                function cargarUnidadesDeMedida(unidadMedidaIdSeleccionada) {
                    $.ajax({
                        url: '/Item/ObtenerUnidadesDeMedida',
                        type: 'GET',
                        success: function (unidades) {
                            const $select = $('#editUnidadMedida');
                            $select.empty();

                            // Agregar opción vacía por defecto
                            $select.append(new Option('Seleccione una unidad', '', true, !unidadMedidaIdSeleccionada));

                            // Agregar las unidades de medida
                            if (unidades && unidades.length > 0) {
                                unidades.forEach(function (um) {
                                    const selected = unidadMedidaIdSeleccionada ? um.id === unidadMedidaIdSeleccionada : false;
                                    $select.append(new Option(um.descripcion, um.id, false, selected));
                                });
                            }
                        },
                        error: function (xhr) {
                            console.error('Error al cargar unidades de medida:', xhr.responseText);
                            const $select = $('#editUnidadMedida');
                            if ($select.find('option').length === 0) {
                                $select.append(new Option('Error cargando unidades', ''));
                            }
                        }
                    });
                }

                // Manejar cambio de familia en el formulario de edición
                $('#editFamilia').change(function () {
                    const familiaId = $(this).val();
                    if (familiaId) {
                        cargarSubfamiliasParaEdicion(familiaId, null);
                    } else {
                        $('#editSubfamilia').empty().append('<option value="">Seleccione subfamilia</option>');
                    }
                });

                // Manejar envío del formulario de edición
                $('#btnGuardarCambios').click(function () {
                    // Validar campos requeridos primero
                    if (!$('#editCodigo').val() || !$('#editDescripcion').val() ||
                        !$('#editSubfamilia').val() || !$('#editUnidadMedida').val()) {
                        ensureSwal().then(() => {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Campos requeridos',
                                text: 'Por favor complete todos los campos requeridos',
                                confirmButtonText: 'Entendido',
                                confirmButtonColor: '#3085d6'
                            });
                        });
                        return;
                    }

                    const formData = {
                        Id: parseInt($('#itemId').val()),
                        Codigo: $('#editCodigo').val(),
                        Descripcion: $('#editDescripcion').val(),
                        SubFamiliaId: parseInt($('#editSubfamilia').val()),
                        Precio: parseFloat($('#editPrecio').val()) || 0,
                        PuntoDePedido: parseFloat($('#editPuntoPedido').val()) || 0,
                        UnidadDeMedidaId: parseInt($('#editUnidadMedida').val()),
                        Critico: $('#editCritico').is(':checked'),
                        Activo: $('#editActivo').is(':checked')
                    };

                    $.ajax({
                        url: '/Item/ActualizarItem',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(formData),
                        success: function (response) {
                            if (!response || response.success === false) {
                                throw new Error(response?.message || 'Error al actualizar el ítem');
                            }

                            // Cerrar el modal
                            const modal = bootstrap.Modal.getInstance(document.getElementById('editarItemModal'));
                            modal.hide();

                            // Mostrar mensaje de éxito con SweetAlert
                            ensureSwal().then(() => {
                                Swal.fire({
                                    icon: 'success',
                                    title: '¡Éxito!',
                                    text: 'Ítem actualizado correctamente',
                                    confirmButtonText: 'Aceptar'
                                });
                            });

                            // Actualizar la lista de ítems
                            buscarItems();
                        },
                        error: function (xhr) {
                            console.error('Error al actualizar el ítem:', xhr.responseText);
                            const errorMsg = xhr.responseJSON?.message || xhr.statusText || 'Error desconocido';

                            ensureSwal().then(() => {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'Error al actualizar el ítem: ' + errorMsg,
                                    confirmButtonText: 'Aceptar'
                                });
                            });
                        }
                    });
                });


                // Verificar si hay cambios en el inventario cada 5 segundos (aumentado de 2 a 5)
                setInterval(function () {
                    const ultimoMovimiento = localStorage.getItem('ultimoMovimientoKardex');
                    const ultimoCheckBuscador = localStorage.getItem('ultimoCheckBuscador') || '0';

                    if (ultimoMovimiento && ultimoMovimiento !== ultimoCheckBuscador) {
                        localStorage.setItem('ultimoCheckBuscador', ultimoMovimiento);
                    }
                }, 5000);

                // Utilidades de exportación e impresión
                function tieneFiltrosAplicados() {
                    const codigo = $('#codigoItem').val();
                    const familiaIds = $('#familiaSelect').val() || [];
                    const subFamiliaIds = $('#subfamiliaSelect').val() || [];
                    const descripcion = $('#descripcionItem').val();
                    const comprar = $('#filtroComprar').is(':checked');
                    const critico = $('#filtroCritico').is(':checked');
                    const activoFiltrado = !$('#filtroActivo').is(':checked');

                    return (
                        (codigo && codigo.trim() !== '') ||
                        familiaIds.length > 0 ||
                        subFamiliaIds.length > 0 ||
                        (descripcion && descripcion.trim() !== '') ||
                        comprar ||
                        critico ||
                        activoFiltrado
                    );
                }

                function exportarTablaVisibleCSV() {
                    // Esta función ya no es necesaria ya que exportamos desde servidor
                    exportarDesdeServidor();
                }

                function exportarDesdeServidor() {
                    const params = new URLSearchParams();
                    const codigo = $('#codigoItem').val();
                    const familiaIds = $('#familiaSelect').val() || [];
                    const subFamiliaIds = $('#subfamiliaSelect').val() || [];
                    const descripcion = $('#descripcionItem').val();

                    if (codigo) params.append('codigo', codigo);
                    familiaIds.forEach(v => params.append('familiaIds', v));
                    subFamiliaIds.forEach(v => params.append('subFamiliaIds', v));
                    if (descripcion) params.append('descripcion', descripcion);

                    const url = '/Item/Exportar' + (params.toString() ? ('?' + params.toString()) : '');
                    window.open(url, '_blank');
                }

                function imprimirTablaVisible() {
                    const tableHtml = `<!DOCTYPE html>
                                    <html lang="es"><head><meta charset="utf-8">
                                    <title>Imprimir Items</title>
                                    <style>
                                        body { font-family: Arial, sans-serif; margin: 15px; }
                                        table { border-collapse: collapse; width: 100%; font-size: 11px; }
                                        th, td { border: 1px solid #ddd; padding: 6px; text-align: left; }
                                        th { background-color: #f2f2f2; font-weight: bold; }
                                    </style>
                                    </head><body>
                                    <h2 style="text-align: center; margin-bottom: 15px;">Listado de Ítems</h2>
                                    <table>
                                        <thead>
                                            <tr>
                                                <th>Código</th>
                                                <th>Familia</th>
                                                <th>Subfamilia</th>
                                                <th>Descripción</th>
                                                <th>Stock</th>
                                                <th>P. Pedido</th>
                                                <th>Pedidos</th>
                                                <th>UM</th>
                                                <th>Precio</th>
                                                <th>Crítico</th>
                                                <th>Activo</th>
                                                <th>Comprar</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${Array.from($('#resultadosBusqueda tr:visible')).map(tr => {
                        const $tds = $(tr).find('td');
                        let rowHTML = '';

                        // Procesar solo las primeras 12 columnas (excluir la 13ª de acciones)
                        for (let i = 0; i < 12; i++) {
                            if (i < $tds.length) {
                                let content = $($tds[i]).text().trim();

                                if (i === 9) { // Columna Crítico
                                    content = $($tds[i]).find('input').is(':checked') ? 'SI' : 'NO';
                                }
                                else if (i === 10) { // Columna Activo
                                    content = $($tds[i]).find('input').is(':checked') ? 'SI' : 'NO';
                                }
                                else if (i === 11) { // Columna Comprar
                                    content = $($tds[i]).find('.fa-shopping-cart').length > 0 ? 'SI' : 'NO';
                                }

                                rowHTML += `<td>${content}</td>`;
                            }
                        }

                        return `<tr>${rowHTML}</tr>`;
                    }).join('')}
                                        </tbody>
                                    </table>
                                    <script>
                                        window.onload = function() { 
                                            window.print(); 
                                            setTimeout(() => window.close(), 1000);
                                        }
                                    <\/script>
                                    </body></html>`;

                    const w = window.open('', '_blank');
                    w.document.open();
                    w.document.write(tableHtml);
                    w.document.close();
                }
            });
        </script>
    }