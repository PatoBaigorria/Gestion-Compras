@model IEnumerable<Gestion_Compras.Models.Ajuste>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Lista de Ajustes";
}

<style>
    .container-custom {
        width: 100%;
        padding-right: 15px;
        padding-left: 15px;
        margin-right: auto;
        margin-left: auto;
        max-width: 1400px;
    }

    .table-responsive {
        position: relative;
    }

    .table-header {
        position: sticky;
        top: 0;
        z-index: 1020;
        background-color: white;
    }

    /* Estilos de filtros */
    .card-filtros .card-body {
        padding: 0.75rem 1rem;
    }

    .card-filtros .card-title {
        color: #495057;
        font-size: 1.1rem;
    }

    .card-filtros .form-control,
    .card-filtros .btn {
        font-size: 0.85rem;
    }

    /* Reducir el tamaño de la letra en la tabla */
    .table-sm td,
    .table-sm th {
        font-size: 0.9em;
        text-align: center;
        vertical-align: middle;
    }

    /* Hover effect en las filas */
    .table-hover tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.075);
    }

    /* Estilos para tipos de ajuste */
    .tipo-ajuste-positivo {
        color: #28a745;
        font-weight: bold;
    }

    .tipo-ajuste-negativo {
        color: #dc3545;
        font-weight: bold;
    }
</style>

<div class="container-custom mt-3">

    <!-- Card de Filtros -->
    <div class="card shadow mb-2 card-filtros">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="fas fa-balance-scale me-2"></i>Gestión de Ajustes
                </h5>
                <div class="d-flex align-items-center gap-3">
                    <div class="input-group" style="width: 400px;">
                        <input type="text" id="searchInput" class="form-control form-control-sm" placeholder="Buscar ajustes...">
                        <button type="button" class="btn btn-primary btn-sm" id="buscarBtn">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                    <button type="button" class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#nuevoAjusteModal">
                        <i class="fas fa-plus me-2"></i>Nuevo Ajuste
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Card de Lista de Ajustes -->
    <div class="card shadow mb-0">
        <div class="card-header bg-light d-flex align-items-center justify-content-between">
            <strong>Ajustes de Inventario</strong>
            <div class="d-flex align-items-center gap-3">
                <div id="paginacionAjustes" class="d-flex align-items-center">
                    <nav>
                        <ul class="pagination pagination-sm mb-0">
                            <li class="page-item" id="btnAnteriorAju">
                                <a class="page-link" href="#" onclick="cambiarPaginaAju(-1); return false;">
                                    ← Anterior
                                </a>
                            </li>
                            <li class="page-item">
                                <span class="page-link text-muted" id="infoPaginaAju">Página 1 de 1</span>
                            </li>
                            <li class="page-item" id="btnSiguienteAju">
                                <a class="page-link" href="#" onclick="cambiarPaginaAju(1); return false;">
                                    Siguiente →
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
                <div class="d-flex align-items-center gap-2">
                    <select id="tamanoPaginaAju" class="form-select form-select-sm" style="width: auto;">
                        <option value="50">50</option>
                        <option value="100" selected>100</option>
                        <option value="200">200</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive" style="height: 600px; overflow-y: auto;">
                <table class="table table-striped table-bordered table-hover text-center table-sm mb-0">
                    <thead class="table-header">
                        <tr>
                            <th style="width: 10%;">Código</th>
                            <th style="width: 35%;">Descripción</th>
                            <th style="width: 12%;">Stock Inicial</th>
                            <th style="width: 12%;">Stock Real</th>
                            <th style="width: 20%;">Observaciones</th>
                            <th style="width: 11%;">Fecha</th>
                        </tr>
                    </thead>
                    <tbody id="ajustesBody">
                        <!-- Filas dinámicas -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</div>

<!-- Modal para Nuevo Ajuste -->
<div class="modal fade" id="nuevoAjusteModal" tabindex="-1" aria-labelledby="nuevoAjusteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="nuevoAjusteModalLabel">Nuevo Ajuste</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="nuevoAjusteForm">
                    
                    <!-- Campo para Código del Item -->
                    <div class="mb-3">
                        <label for="itemCodigo" class="form-label">Código del Item</label>
                        <input type="text" id="itemCodigo" name="ItemCodigo" class="form-control" placeholder="Ingrese el código del item" required />
                    </div>

                    <!-- Información del Item (se muestra después de buscar) -->
                    <div id="itemInfo" style="display: none;">
                        <div class="alert alert-info">
                            <h6 id="itemDescripcion">Descripción del Item</h6>
                            <p><strong>Stock Anterior:</strong> <span id="stockActual">0</span></p>
                        </div>
                    </div>

                    <!-- Campo para Stock Real -->
                    <div class="mb-3">
                        <label for="stockReal" class="form-label">Stock Real</label>
                        <input type="number" id="stockReal" name="StockReal" class="form-control" step="0.01" min="0" placeholder="Ingrese el stock real" required />
                    </div>

                    <!-- Campo para Observaciones -->
                    <div class="mb-3">
                        <label for="observaciones" class="form-label">Observaciones</label>
                        <textarea id="observaciones" name="Observaciones" class="form-control" rows="3" placeholder="Ingrese observaciones (opcional)"></textarea>
                    </div>

                    <!-- Campos ocultos -->
                    <input type="hidden" id="stockIni" name="StockIni" />
                    <input type="hidden" id="itemId" name="ItemId" />

                    <button type="submit" class="btn btn-primary">Guardar Ajuste</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Estado de paginación
            let paginaActualAju = 1;
            let totalPaginasAju = 1;
            let tamanoPaginaAju = 100;

            // Render tabla
            function renderAjustes(items) {
                const $tbody = $('#ajustesBody');
                $tbody.empty();
                if (!items || items.length === 0) {
                    $tbody.append('<tr><td colspan="6" class="text-center text-muted"><i class="fas fa-info-circle"></i> No se encontraron ajustes</td></tr>');
                    return;
                }
                const frag = document.createDocumentFragment();
                items.forEach(a => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                        <td>${(a.codigo || '').toUpperCase()}</td>
                        <td style="text-align: center;">${a.descripcion || ''}</td>
                        <td>${parseFloat(a.stockIni).toFixed(2)}</td>
                        <td>${parseFloat(a.stockReal).toFixed(2)}</td>
                        <td style="text-align: center;">${a.observaciones || ''}</td>
                        <td>${a.fecha || ''}</td>`;
                    frag.appendChild(tr);
                });
                $tbody[0].appendChild(frag);
            }

            // Actualizar paginación
            function actualizarPaginacion(total) {
                $('#infoPaginaAju').text(`Página ${paginaActualAju} de ${totalPaginasAju} (${total} ajustes)`);
                $('#btnAnteriorAju').toggleClass('disabled', paginaActualAju <= 1);
                $('#btnSiguienteAju').toggleClass('disabled', paginaActualAju >= totalPaginasAju);
            }

            // Buscar ajustes (JSON)
            function buscarAjustes(pagina = 1) {
                const searchTerm = $('#searchInput').val();
                $.ajax({
                    url: '@Url.Action("BuscarAjustesJson", "Ajuste")',
                    type: 'GET',
                    data: { searchTerm: searchTerm, pagina: pagina, tamanoPagina: tamanoPaginaAju },
                    success: function (response) {
                        const items = response?.items || [];
                        paginaActualAju = response?.pagina || 1;
                        tamanoPaginaAju = response?.tamanoPagina || tamanoPaginaAju;
                        const total = (typeof response?.total === 'number') ? response.total : items.length;
                        totalPaginasAju = Math.max(1, Math.ceil(total / tamanoPaginaAju));
                        renderAjustes(items);
                        actualizarPaginacion(total);
                    },
                    error: function (xhr) {
                        console.error('Error al buscar ajustes:', xhr.responseText);
                        $('#ajustesBody').html('<tr><td colspan="6" class="text-center text-danger">Error al cargar</td></tr>');
                    }
                });
            }

            // Evento click del botón buscar
            $('#buscarBtn').click(function () { buscarAjustes(1); });

            // Búsqueda en tiempo real al escribir
            $('#searchInput').on('keyup', function (e) {
                if (e.keyCode === 13) { buscarAjustes(1); }
            });

            // Búsqueda automática después de 500ms de inactividad
            let searchTimeout;
            $('#searchInput').on('input', function () {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(function () { buscarAjustes(1); }, 500);
            });

            // Paginación eventos
            window.cambiarPaginaAju = function(delta){ const nueva = paginaActualAju + delta; if(nueva>=1 && nueva<= totalPaginasAju) buscarAjustes(nueva); }
            $('#tamanoPaginaAju').on('change', function(){ tamanoPaginaAju = parseInt($(this).val(),10)||100; buscarAjustes(1); });

            // Limpiar formulario cuando se abre el modal
            $('#nuevoAjusteModal').on('show.bs.modal', function () {
                // Limpiar todos los campos del formulario
                $('#nuevoAjusteForm')[0].reset();
                $('#itemInfo').hide();
                $('#stockIni').val('');
                $('#itemId').val('');
            });

            // Función reutilizable para buscar item por código
            function buscarItemAjuste(value) {
                if (!value) {
                    mostrarToast('Por favor ingrese un código de item', 'warning');
                    return;
                }
                $.ajax({
                    url: '@Url.Action("ObtenerItemPorCodigo", "Ajuste")',
                    type: 'GET',
                    data: { codigo: value },
                    success: function (response) {
                        if (response.success) {
                            $('#itemDescripcion').text(response.item.descripcion);
                            $('#stockActual').text(response.item.stock);
                            $('#stockIni').val(response.item.stock);
                            $('#itemId').val(response.item.id);
                            $('#itemInfo').show();
                            $('#stockReal').focus();
                        } else {
                            mostrarToast(response.message || 'Item no encontrado', 'warning');
                            $('#itemInfo').hide();
                            $('#itemDescripcion').text('');
                            $('#stockActual').text('0');
                            $('#stockIni').val('');
                            $('#itemId').val('');
                        }
                    },
                    error: function (xhr, status, errorThrown) {
                        console.error('Error al buscar item:', xhr.responseText);
                        mostrarToast('Error al buscar item', 'error');
                        $('#itemInfo').hide();
                        $('#itemDescripcion').text('');
                        $('#stockActual').text('0');
                        $('#stockIni').val('');
                        $('#itemId').val('');
                    }
                });
            }

            // Convertir a mayúsculas mientras se escribe
            $('#itemCodigo').on('input', function () {
                var cursorPos = this.selectionStart;
                var value = $(this).val().toUpperCase();
                $(this).val(value);
                this.setSelectionRange(cursorPos, cursorPos);

                // Búsqueda automática al llegar a 7 caracteres
                if (value.length === 7) {
                    buscarItemAjuste(value);
                } else if (value.length < 7) {
                    // Limpiar info si aún no completa 7 caracteres
                    $('#itemInfo').hide();
                    $('#itemDescripcion').text('');
                    $('#stockActual').text('0');
                    $('#stockIni').val('');
                    $('#itemId').val('');
                }
            });

            // Buscar item al presionar Enter (si ya tiene 7 caracteres)
            $('#itemCodigo').on('keypress', function (e) {
                if (e.which === 13) {
                    const value = $('#itemCodigo').val().toString().toUpperCase();
                    if (value.length === 7) {
                        buscarItemAjuste(value);
                    }
                }
            });

            // Enviar formulario de nuevo ajuste
            $('#nuevoAjusteForm').submit(function (e) {
                e.preventDefault();

                const ajusteData = {
                    ItemCodigo: $('#itemCodigo').val(),
                    StockIni: parseFloat($('#stockIni').val()),
                    StockReal: parseFloat($('#stockReal').val()),
                    Observaciones: $('#observaciones').val()
                };

                $.ajax({
                    url: '@Url.Action("GuardarAjuste", "Ajuste")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(ajusteData),
                    success: function (response) {
                        if (response.success) {
                            mostrarToast('Ajuste guardado exitosamente', 'success');
                            $('#nuevoAjusteModal').modal('hide');
                            
                            // Limpiar formulario
                            $('#nuevoAjusteForm')[0].reset();
                            $('#itemInfo').hide();
                            
                            // Recargar la tabla manteniendo página
                            buscarAjustes(paginaActualAju);
                            
                            // Notificar a otras ventanas que hay un nuevo movimiento
                            localStorage.setItem('ultimoMovimientoStock', Date.now().toString());
                        } else {
                            mostrarToast('Error: ' + response.message, 'error');
                        }
                    },
                    error: function (xhr, status, errorThrown) {
                        console.error('Error al guardar ajuste:', xhr.responseText);
                        mostrarToast('Error al guardar ajuste', 'error');
                    }
                });
            });

            // Función para mostrar notificaciones toast modernas
            function mostrarToast(mensaje, tipo) {
                // Crear el contenedor de toasts si no existe
                if ($('#toast-container').length === 0) {
                    $('body').append('<div id="toast-container" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;"></div>');
                }

                // Definir colores según el tipo
                let bgClass = '';
                let iconClass = '';
                switch(tipo) {
                    case 'success':
                        bgClass = 'bg-success text-white';
                        iconClass = 'fas fa-check-circle';
                        break;
                    case 'error':
                        bgClass = 'bg-danger text-white';
                        iconClass = 'fas fa-exclamation-circle';
                        break;
                    case 'warning':
                        bgClass = 'bg-warning text-dark';
                        iconClass = 'fas fa-exclamation-triangle';
                        break;
                    default:
                        bgClass = 'bg-info text-white';
                        iconClass = 'fas fa-info-circle';
                }

                // Crear el toast
                const toastId = 'toast-' + Date.now();
                const toastHtml = `
                    <div id="${toastId}" class="toast ${bgClass}" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="4000">
                        <div class="toast-header ${bgClass} border-0">
                            <i class="${iconClass} me-2"></i>
                            <strong class="me-auto">Notificación</strong>
                            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body">
                            ${mensaje}
                        </div>
                    </div>
                `;

                // Agregar el toast al contenedor
                $('#toast-container').append(toastHtml);

                // Mostrar el toast
                const toastElement = new bootstrap.Toast(document.getElementById(toastId));
                toastElement.show();

                // Remover el toast del DOM después de que se oculte
                document.getElementById(toastId).addEventListener('hidden.bs.toast', function () {
                    $(this).remove();
                });
            }
            // Inicial: cargar página 1
            buscarAjustes(1);
        });
    </script>
}