@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Lista de Pedidos";
}

<div class="container-custom mt-1">
    <div class="row">
        <div class="col-md-6">
            <h2 class="mb-3">Lista de Pedidos</h2>
        </div>
        <div class="col-md-6 text-end">
            <a href="/Pedido/Nuevo" class="btn btn-primary me-2">
                <i class="fas fa-plus"></i> Generar Pedido
            </a>
            <button type="button" class="btn btn-danger" onclick="anularPedido()">
                <i class="fas fa-times"></i> Anular Pedido
            </button>
        </div>
    </div>

    <!-- Filtros -->
    <div class="card shadow mb-3">
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <label for="filtroGeneral" class="form-label">Filtro General:</label>
                    <input type="text" class="form-control" id="filtroGeneral" placeholder="Buscar en todos los campos..." onkeyup="filtrarTabla()">
                </div>
                <div class="col-md-6">
                    <label class="form-label">Filtrar por Estado:</label>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="filtroPendiente" onchange="filtrarTabla()" checked>
                                <label class="form-check-label" for="filtroPendiente">
                                    Pendiente
                                </label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="filtroCompletado" onchange="filtrarTabla()" checked>
                                <label class="form-check-label" for="filtroCompletado">
                                    Completado
                                </label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="filtroAnulado" onchange="filtrarTabla()">
                                <label class="form-check-label" for="filtroAnulado">
                                    Anulado
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabla de Pedidos -->
    <div class="card shadow">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-bordered table-hover text-center table-sm" id="tablaPedidos">
                    <thead class="table-light">
                        <tr>
                            <th style="width: 100px;">N° Pedido</th>
                            <th style="width: 100px;">Fecha</th>
                            <th style="width: 100px;">Código Item</th>
                            <th style="width: 300px;">Descripción</th>
                            <th style="width: 100px;">Unidad Medida</th>
                            <th style="width: 80px;">Cantidad</th>
                            <th style="width: 80px;">Pendiente</th>
                            <th style="width: 80px;">Recibido</th>
                            <th style="width: 150px;">Subfamilia</th>
                            <th style="width: 100px;">Estado</th>
                        </tr>
                    </thead>
                    <tbody id="listaPedidos">
                        <!-- Los pedidos se cargarán aquí -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style>
    .container-custom {
        width: 100%;
        padding-right: 15px;
        padding-left: 15px;
        margin-right: auto;
        margin-left: auto;
        max-width: 1400px;
    }
    
    .table-sm td, 
    .table-sm th { 
        font-size: 0.9em; 
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function () {
            cargarPedidos();
        });

        function cargarPedidos() {
            $.ajax({
                url: '/api/pedido/list',
                type: 'GET',
                success: function (response) {
                    const tbody = $('#listaPedidos');
                    tbody.empty();

                    if (response && response.length > 0) {
                        $.each(response, function (index, pedido) {
                            const estadoBadge = getEstadoBadge(pedido.estado);
                            // Corregir formato de fecha - agregar tiempo para evitar problemas de zona horaria
                            const fecha = new Date(pedido.fechaPedido + 'T00:00:00').toLocaleDateString('es-ES');
                            
                            tbody.append(`
                                <tr>
                                    <td>${pedido.numeroPedido}</td>
                                    <td>${fecha}</td>
                                    <td>${pedido.itemCodigo || ''}</td>
                                    <td style="text-align: left;">${pedido.itemDescripcion || ''}</td>
                                    <td>${pedido.unidadMedida || ''}</td>
                                    <td>${pedido.cantidad}</td>
                                    <td>${pedido.cantidad - pedido.recibido}</td>
                                    <td>${pedido.recibido}</td>
                                    <td>${pedido.subFamilia || ''}</td>
                                    <td>${estadoBadge}</td>
                                </tr>
                            `);
                        });
                        
                        // Aplicar filtros después de cargar los datos
                        filtrarTabla();
                    } else {
                        tbody.append(`
                            <tr>
                                <td colspan="10" class="text-center text-muted">
                                    <i class="fas fa-info-circle"></i> No se encontraron pedidos
                                </td>
                            </tr>
                        `);
                    }
                },
                error: function (xhr, status, errorThrown) {
                    console.error('Error al cargar pedidos:', xhr.responseText);
                    $('#listaPedidos').html(`
                        <tr>
                            <td colspan="10" class="text-center text-danger">
                                <i class="fas fa-exclamation-triangle"></i> Error al cargar los pedidos
                            </td>
                        </tr>
                    `);
                }
            });
        }

        function getEstadoBadge(estado) {
            switch (estado) {
                case 'PENDIENTE':
                    return '<span class="badge bg-warning">PENDIENTE</span>';
                case 'RECIBIDO':
                    return '<span class="badge bg-success">RECIBIDO</span>';
                case 'COMPLETADO':
                    return '<span class="badge bg-success">COMPLETADO</span>';
                case 'CANCELADO':
                    return '<span class="badge bg-danger">CANCELADO</span>';
                default:
                    return '<span class="badge bg-secondary">' + estado + '</span>';
            }
        }

        // Función para filtrar la tabla
        function filtrarTabla() {
            const filtroGeneral = document.getElementById('filtroGeneral').value.toLowerCase();
            const filtroPendiente = document.getElementById('filtroPendiente').checked;
            const filtroCompletado = document.getElementById('filtroCompletado').checked;
            const filtroAnulado = document.getElementById('filtroAnulado').checked;
            const filas = document.querySelectorAll('#listaPedidos tr');

            filas.forEach(function(fila) {
                // Obtener el texto de todas las celdas de la fila
                const textoFila = fila.textContent.toLowerCase();
                
                // Verificar filtro general
                const cumpleFiltroGeneral = filtroGeneral === '' || textoFila.includes(filtroGeneral);
                
                // Verificar filtro de estado
                let cumpleFiltroEstado = false;
                const estadoCell = fila.querySelector('td:nth-child(10)'); // Columna de estado
                if (estadoCell) {
                    const estado = estadoCell.textContent.toUpperCase();
                    
                    // Verificar cada tipo de estado
                    if (filtroPendiente && estado.includes('PENDIENTE')) {
                        cumpleFiltroEstado = true;
                    }
                    if (filtroCompletado && (estado.includes('COMPLETADO') || estado.includes('RECIBIDO'))) {
                        cumpleFiltroEstado = true;
                    }
                    if (filtroAnulado && (estado.includes('CANCELADO') || estado.includes('ANULADO'))) {
                        cumpleFiltroEstado = true;
                    }
                } else {
                    // Si no hay celda de estado, mostrar si al menos un filtro está activo
                    cumpleFiltroEstado = filtroPendiente || filtroCompletado || filtroAnulado;
                }
                
                // Mostrar u ocultar fila
                if (cumpleFiltroGeneral && cumpleFiltroEstado) {
                    fila.style.display = '';
                } else {
                    fila.style.display = 'none';
                }
            });
        }

        // Función para anular pedido
        function anularPedido() {
            Swal.fire({
                title: 'Anular Pedido',
                text: 'Ingrese el número de pedido que desea anular:',
                input: 'number',
                inputAttributes: {
                    min: 1,
                    step: 1
                },
                showCancelButton: true,
                confirmButtonText: 'Anular',
                cancelButtonText: 'Cancelar',
                confirmButtonColor: '#dc3545',
                inputValidator: (value) => {
                    if (!value || value <= 0) {
                        return 'Debe ingresar un número de pedido válido';
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const numeroPedido = result.value;
                    
                    // Confirmar anulación
                    Swal.fire({
                        title: '¿Está seguro?',
                        text: `¿Desea anular el pedido N° ${numeroPedido}? Esta acción no se puede deshacer.`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#dc3545',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Sí, anular',
                        cancelButtonText: 'Cancelar'
                    }).then((confirmResult) => {
                        if (confirmResult.isConfirmed) {
                            // Realizar la anulación
                            $.ajax({
                                url: `/api/pedido/anular/${numeroPedido}`,
                                type: 'PUT',
                                success: function(response) {
                                    Swal.fire({
                                        title: '¡Pedido Anulado!',
                                        text: `El pedido N° ${numeroPedido} ha sido anulado correctamente.`,
                                        icon: 'success',
                                        timer: 2000,
                                        showConfirmButton: false
                                    });
                                    cargarPedidos(); // Recargar la lista
                                },
                                error: function(xhr, status, errorThrown) {
                                    let mensaje = 'Error al anular el pedido';
                                    if (xhr.responseJSON && xhr.responseJSON.message) {
                                        mensaje = xhr.responseJSON.message;
                                    }
                                    Swal.fire({
                                        title: 'Error',
                                        text: mensaje,
                                        icon: 'error'
                                    });
                                }
                            });
                        }
                    });
                }
            });
        }

        // Actualizar lista automáticamente cada 5 segundos
        setInterval(function() {
            cargarPedidos();
        }, 5000);
    </script>
}
