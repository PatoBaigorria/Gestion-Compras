@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Lista de Pedidos";
}
<div class="container-custom mt-3">

    <!-- Card de Filtros -->
    <div class="card shadow mb-2 card-filtros">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="card-title mb-0">
                    <i class="fas fa-shopping-cart me-2"></i>Gestión de Pedidos
                </h5>
            </div>
            
            <div class="row g-3">
                <div class="col-md-5">
                    <label for="filtroGeneral" class="form-label">Filtro General</label>
                    <input type="text" class="form-control form-control-sm" id="filtroGeneral"
                        placeholder="Buscar en todos los campos...">
                </div>
                <div class="col-md-7">
                    <label class="form-label">Filtrar por Estado</label>
                    <div class="d-flex gap-3 align-items-center">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="filtroPendiente" checked>
                            <label class="form-check-label" for="filtroPendiente">
                                Pendiente
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="filtroCompletado" checked>
                            <label class="form-check-label" for="filtroCompletado">
                                Completado
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="filtroAnulado" checked>
                            <label class="form-check-label" for="filtroAnulado">
                                Cancelado
                            </label>
                        </div>
                        @if (User.IsInRole("Administrador"))
                        {
                            <div class="d-flex gap-2 ms-1">
                                <a href="/Pedido/Nuevo" class="btn btn-success btn-sm">
                                    <i class="fas fa-plus me-1"></i>Generar Pedido
                                </a>
                                <button type="button" class="btn btn-danger btn-sm" onclick="anularPedido()">
                                    <i class="fas fa-times me-1"></i>Anular Pedido
                                </button>
                                <button type="button" class="btn btn-outline-secondary btn-sm" onclick="descargarPdfPedido()">
                                    <i class="fas fa-file-pdf me-1"></i>PDF
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Card de Lista de Pedidos -->
    <div class="card shadow mb-0">
        <div class="card-header bg-light d-flex align-items-center justify-content-between">
            <strong>Lista de Pedidos</strong>
            <div class="d-flex align-items-center gap-3">
                <div id="paginacionPedidos" class="d-flex align-items-center">
                    <nav>
                        <ul class="pagination pagination-sm mb-0">
                            <li class="page-item" id="btnAnteriorPedidos">
                                <a class="page-link" href="#" onclick="cambiarPaginaPedidos(-1); return false;">
                                    ← Anterior
                                </a>
                            </li>
                            <li class="page-item">
                                <span class="page-link text-muted" id="infoPaginaPedidos">Página 1 de 1</span>
                            </li>
                            <li class="page-item" id="btnSiguientePedidos">
                                <a class="page-link" href="#" onclick="cambiarPaginaPedidos(1); return false;">
                                    Siguiente →
                                </a>
                            </li>
                        </ul>
                    </nav>
                </div>
                <div class="d-flex align-items-center gap-2">
                    <select id="tamanoPaginaPedidos" class="form-select form-select-sm" style="width: auto;">
                        <option value="50">50</option>
                        <option value="100" selected>100</option>
                        <option value="200">200</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive" style="height: 600px; overflow-y: auto;">
                <table class="table table-striped table-bordered table-hover text-center table-sm mb-0" id="tablaPedidos">
                    <thead class="table-header">
                        <tr>
                            <th style="width: 8%;">N° Pedido</th>
                            <th style="width: 8%;">Fecha</th>
                            <th style="width: 10%;">Código</th>
                            <th style="width: 25%;">Descripción</th>
                            <th style="width: 8%;">U.M.</th>
                            <th style="width: 8%;">Cantidad</th>
                            <th style="width: 8%;">Pendiente</th>
                            <th style="width: 8%;">Recibido</th>
                            <th style="width: 12%;">Subfamilia</th>
                            <th style="width: 8%;">Estado</th>
                            <th style="width: 12%;">Usuario</th>
                        </tr>
                    </thead>
                    <tbody id="listaPedidos">
                        <!-- Los pedidos se cargarán aquí -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</div>

<style>
    .container-custom {
        width: 100%;
        padding-right: 15px;
        padding-left: 15px;
        margin-right: auto;
        margin-left: auto;
        max-width: 1400px;
    }

    .table-responsive {
        position: relative;
    }

    .table-header {
        position: sticky;
        top: 0;
        z-index: 1020;
        background-color: white;
    }

    /* Estilos de filtros */
    .card-filtros .card-body {
        padding: 0.75rem 1rem;
    }

    .card-filtros .card-title {
        color: #495057;
        font-size: 1.1rem;
    }

    .card-filtros .form-control,
    .card-filtros .form-check-label,
    .card-filtros .btn {
        font-size: 0.85rem;
    }

    /* Reducir el tamaño de la letra en la tabla */
    .table-sm td,
    .table-sm th {
        font-size: 0.9em;
        text-align: center;
        vertical-align: middle;
    }

    /* Hover effect en las filas */
    .table-hover tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.075);
    }

    .card-filtros label {
        font-size: 0.85rem;
        /* achica las etiquetas */
        margin-bottom: 0.25rem;
    }

    .card-filtros .form-control,
    .card-filtros .form-check-label {
        font-size: 0.85rem;
        /* controles más chicos */
    }

    .table-sm td,
    .table-sm th {
        font-size: 0.9em;
        text-align: center;
        vertical-align: middle;
    }
    /* Descripción (4ta columna) a la izquierda */
    #tablaPedidos tbody tr td:nth-child(4) {
        text-align: left;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function () {
            cargarPedidos(1);
        });

        let paginaActualP = 1;
        let totalPaginasP = 1;
        let tamanoPaginaP = 100;
        let tamanoPaginaReal = 100; // Tamaño real de página para filtros locales
        
        // Variables para el filtrado local
        let todosLosPedidos = []; // Todos los pedidos del servidor
        let pedidosFiltrados = []; // Pedidos después de aplicar filtros de checkboxes
        let paginaFiltrada = 1; // Página actual para filtros locales
        let usandoFiltrosLocales = false; // Flag para saber si estamos en modo filtros locales

        function cargarPedidos(pagina = 1) {
            // Solo enviar filtro general al servidor
            const filtroGeneral = $('#filtroGeneral').val() || '';
            
            // Verificar si hay filtros de checkboxes activos
            const filtroPendiente = $('#filtroPendiente').is(':checked');
            const filtroCompletado = $('#filtroCompletado').is(':checked');
            const filtroAnulado = $('#filtroAnulado').is(':checked');
            const hayFiltrosCheckbox = !(filtroPendiente && filtroCompletado && filtroAnulado);
            
            console.log('Estados checkboxes:', { filtroPendiente, filtroCompletado, filtroAnulado, hayFiltrosCheckbox });
            
            const params = new URLSearchParams();
            params.append('filtroGeneral', filtroGeneral);
            
            if (hayFiltrosCheckbox) {
                // Si hay filtros de checkboxes, obtener TODOS los elementos
                tamanoPaginaReal = tamanoPaginaP; // Guardar el tamaño real
                params.append('pagina', 1);
                params.append('tamanoPagina', 10000); // Número grande para obtener todos
                usandoFiltrosLocales = true;
                paginaFiltrada = pagina;
                console.log('Modo filtros locales activado, página solicitada:', pagina, 'tamaño real:', tamanoPaginaReal);
            } else {
                // Sin filtros de checkboxes, usar paginación normal
                params.append('pagina', pagina);
                params.append('tamanoPagina', tamanoPaginaP);
                usandoFiltrosLocales = false;
                console.log('Modo paginación normal, página:', pagina);
            }
            
            $.ajax({
                url: '/api/pedido/lista?' + params.toString(),
                type: 'GET',
                success: function (response) {
                    const items = (response && response.items) ? response.items : [];
                    const total = response && typeof response.total === 'number' ? response.total : items.length;
                    
                    console.log('Respuesta del servidor:', { items: items.length, total, usandoFiltrosLocales });
                    
                    // Guardar todos los pedidos para filtrado local
                    todosLosPedidos = items;
                    paginaActualP = response && response.pagina ? response.pagina : 1;
                    tamanoPaginaP = response && response.tamanoPagina ? response.tamanoPagina : tamanoPaginaP;
                    totalPaginasP = Math.max(1, Math.ceil(total / tamanoPaginaP));

                    if (usandoFiltrosLocales) {
                        // Modo filtros locales: aplicar filtros y paginación local
                        console.log('Aplicando filtros locales...');
                        aplicarFiltrosYPaginacion();
                    } else {
                        // Modo normal: renderizar todos los pedidos
                        console.log('Modo normal, renderizando', items.length, 'pedidos');
                        renderizarPedidos(items);
                        actualizarPaginacionPedidos(total);
                    }
                },
                error: function (xhr, status, errorThrown) {
                    console.error('Error al cargar pedidos:', xhr.responseText);
                    $('#listaPedidos').html(`
                                        <tr>
                                            <td colspan="10" class="text-center text-danger">
                                                <i class="fas fa-exclamation-triangle"></i> Error al cargar los pedidos
                                            </td>
                                        </tr>
                                    `);
                }
            });
        }

        // Paginación
        function actualizarPaginacionPedidos(total) {
            $('#infoPaginaPedidos').text(`Página ${paginaActualP} de ${totalPaginasP} (${total} pedidos)`);
            $('#btnAnteriorPedidos').toggleClass('disabled', paginaActualP <= 1);
            $('#btnSiguientePedidos').toggleClass('disabled', paginaActualP >= totalPaginasP);
        }

        window.cambiarPaginaPedidos = function (delta) {
            if (usandoFiltrosLocales) {
                // Modo filtros locales
                const nueva = paginaFiltrada + delta;
                const totalPaginasFiltradas = Math.max(1, Math.ceil(pedidosFiltrados.length / tamanoPaginaReal));
                console.log('Cambio de página filtros locales:', { nueva, totalPaginasFiltradas, tamanoPaginaReal });
                if (nueva >= 1 && nueva <= totalPaginasFiltradas) {
                    paginaFiltrada = nueva;
                    aplicarFiltrosYPaginacion();
                }
            } else {
                // Modo normal
                const nueva = paginaActualP + delta;
                if (nueva >= 1 && nueva <= totalPaginasP) {
                    cargarPedidos(nueva);
                }
            }
        };

        // Manejar cambio de tamaño de página
        $('#tamanoPaginaPedidos').on('change', function() {
            tamanoPaginaP = parseInt($(this).val(), 10) || 100;
            tamanoPaginaReal = tamanoPaginaP; // Actualizar también el tamaño real
            cargarPedidos(1);
        });

        function getEstadoBadge(estado) {
            switch (estado) {
                case 'PENDIENTE':
                    return '<span class="badge bg-warning text-dark">PENDIENTE</span>';
                case 'RECIBIDO':
                    return '<span class="badge bg-success">RECIBIDO</span>';
                case 'COMPLETADO':
                    return '<span class="badge bg-success">COMPLETADO</span>';
                case 'CANCELADO':
                    return '<span class="badge bg-danger">CANCELADO</span>';
                default:
                    return '<span class="badge bg-secondary">' + estado + '</span>';
            }
        }

        // Función para renderizar pedidos en la tabla
        function renderizarPedidos(pedidos) {
            const tbody = $('#listaPedidos');
            tbody.empty();
            
            if (!pedidos || pedidos.length === 0) {
                tbody.append(`
                    <tr>
                        <td colspan="11" class="text-center text-muted">
                            <i class="fas fa-info-circle"></i> No se encontraron pedidos
                        </td>
                    </tr>
                `);
                return;
            }

            $.each(pedidos, function (index, pedido) {
                const estadoBadge = getEstadoBadge(pedido.estado);
                const fecha = new Date(pedido.fechaPedido + 'T00:00:00').toLocaleDateString('es-ES');

                tbody.append(`
                    <tr>
                        <td>${pedido.numeroPedido}</td>
                        <td>${fecha}</td>
                        <td>${pedido.itemCodigo || ''}</td>
                        <td>${pedido.itemDescripcion || ''}</td>
                        <td>${pedido.unidadMedida || ''}</td>
                        <td>${pedido.cantidad}</td>
                        <td>${pedido.estado === 'CANCELADO' ? 0 : (pedido.cantidad - pedido.recibido)}</td>
                        <td>${pedido.recibido}</td>
                        <td>${pedido.subFamilia || ''}</td>
                        <td>${estadoBadge}</td>
                        <td>${pedido.usuario || ''}</td>
                    </tr>
                `);
            });
        }

        // Nueva función para aplicar filtros y paginación local
        function aplicarFiltrosYPaginacion() {
            const filtroPendiente = $('#filtroPendiente').is(':checked');
            const filtroCompletado = $('#filtroCompletado').is(':checked');
            const filtroAnulado = $('#filtroAnulado').is(':checked');
            const filtroGeneral = $('#filtroGeneral').val().toLowerCase().trim();

            console.log('Aplicando filtros:', { filtroPendiente, filtroCompletado, filtroAnulado, filtroGeneral });
            console.log('Total pedidos sin filtrar:', todosLosPedidos.length);

            // Filtrar todos los pedidos
            pedidosFiltrados = todosLosPedidos.filter(pedido => {
                // Filtro por estado
                const estado = pedido.estado.toUpperCase();
                let cumpleEstado = false;
                
                if (filtroPendiente && estado.includes('PENDIENTE')) cumpleEstado = true;
                if (filtroCompletado && (estado.includes('COMPLETADO') || estado.includes('RECIBIDO'))) cumpleEstado = true;
                if (filtroAnulado && (estado.includes('CANCELADO') || estado.includes('ANULADO'))) cumpleEstado = true;

                if (!cumpleEstado) return false;

                // Filtro general (buscar en todos los campos)
                if (filtroGeneral) {
                    const textoCompleto = [
                        pedido.numeroPedido,
                        pedido.itemCodigo,
                        pedido.itemDescripcion,
                        pedido.unidadMedida,
                        pedido.cantidad,
                        pedido.recibido,
                        pedido.subFamilia,
                        pedido.estado,
                        pedido.usuario
                    ].join(' ').toLowerCase();

                    if (!textoCompleto.includes(filtroGeneral)) return false;
                }

                return true;
            });

            console.log('Pedidos filtrados:', pedidosFiltrados.length);

            // Calcular paginación
            const totalPedidosFiltrados = pedidosFiltrados.length;
            const totalPaginasFiltradas = Math.max(1, Math.ceil(totalPedidosFiltrados / tamanoPaginaReal));

            console.log('Paginación:', { paginaFiltrada, totalPaginasFiltradas, tamanoPaginaReal });

            // Ajustar página actual si es necesario
            if (paginaFiltrada > totalPaginasFiltradas) {
                paginaFiltrada = totalPaginasFiltradas;
            }

            // Obtener pedidos para la página actual
            const inicio = (paginaFiltrada - 1) * tamanoPaginaReal;
            const fin = inicio + tamanoPaginaReal;
            const pedidosPagina = pedidosFiltrados.slice(inicio, fin);

            console.log('Pedidos para esta página:', pedidosPagina.length, 'de', inicio, 'a', fin);

            // Renderizar pedidos de la página actual
            renderizarPedidos(pedidosPagina);

            // Actualizar información de paginación
            $('#infoPaginaPedidos').text(`Página ${paginaFiltrada} de ${totalPaginasFiltradas} (${totalPedidosFiltrados} pedidos)`);

            // Actualizar botones
            $('#btnAnteriorPedidos').toggleClass('disabled', paginaFiltrada <= 1);
            $('#btnSiguientePedidos').toggleClass('disabled', paginaFiltrada >= totalPaginasFiltradas);
        }


        // Eventos para filtros
        $('#filtroGeneral').on('input', function() {
            clearTimeout(window.filtroTimeout);
            window.filtroTimeout = setTimeout(function() {
                if (usandoFiltrosLocales) {
                    // Si estamos en modo filtros locales, aplicar filtros localmente
                    paginaFiltrada = 1; // Volver a página 1
                    aplicarFiltrosYPaginacion();
                } else {
                    // Modo normal: recargar del servidor
                    cargarPedidos(1);
                }
            }, 500);
        });
        
        $('#filtroPendiente, #filtroCompletado, #filtroAnulado').on('change', function() {
            if (usandoFiltrosLocales) {
                paginaFiltrada = 1; // Volver a página 1
                aplicarFiltrosYPaginacion();
            } else {
                // Recargar datos con filtros
                cargarPedidos(1);
            }
        });

        // Función para anular pedido
        function anularPedido() {
            mostrarModalAnularPedido();
        }

        // Función para descargar PDF de pedido
        function descargarPdfPedido() {
            Swal.fire({
                title: 'Descargar PDF del Pedido',
                text: 'Ingrese el número de pedido:',
                input: 'number',
                inputAttributes: {
                    min: 1,
                    step: 1
                },
                showCancelButton: true,
                confirmButtonText: 'Descargar PDF',
                cancelButtonText: 'Cancelar',
                confirmButtonColor: '#28a745',
                inputValidator: (value) => {
                    if (!value || value <= 0) {
                        return 'Debe ingresar un número de pedido válido';
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const numeroPedido = result.value;
                    // Abrir el PDF en una nueva ventana
                    const urlPdf = `/api/pedido/pdf/${numeroPedido}`;
                    window.open(urlPdf, '_blank');
                }
            });
        }

        // Función separada para mostrar el modal de anular pedido
        function mostrarModalAnularPedido() {
            Swal.fire({
                title: 'Anular Pedido',
                text: 'Ingrese el número de pedido:',
                input: 'number',
                inputAttributes: {
                    min: 1,
                    step: 1
                },
                showCancelButton: true,
                confirmButtonText: 'Buscar',
                cancelButtonText: 'Cancelar',
                confirmButtonColor: '#007bff',
                inputValidator: (value) => {
                    if (!value || value <= 0) {
                        return 'Debe ingresar un número de pedido válido';
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const numeroPedido = result.value;
                    mostrarItemsPedido(numeroPedido);
                }
            });
        }

        // Función para mostrar los ítems del pedido
        function mostrarItemsPedido(numeroPedido) {
            $.ajax({
                url: `/api/pedido/items/${numeroPedido}`,
                type: 'GET',
                success: function (response) {
                    if (response && response.length > 0) {
                        // Verificar si todos los ítems están anulados
                        const todosAnulados = response.every(item => item.estado === 'CANCELADO');
                        if (todosAnulados) {
                            Swal.fire({
                                title: 'Pedido Anulado',
                                text: `El pedido N° ${numeroPedido} ya está completamente anulado`,
                                icon: 'info',
                                confirmButtonText: 'Buscar otro pedido'
                            }).then(() => {
                                // Volver a mostrar el modal de búsqueda
                                mostrarModalAnularPedido();
                            });
                            return;
                        }
                        let tablaItems = `
                                            <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                                                <table class="table table-sm table-striped">
                                                    <thead class="table-light">
                                                        <tr>
                                                            <th>Código</th>
                                                            <th>Descripción</th>
                                                            <th>Cantidad</th>
                                                            <th>Estado</th>
                                                            <th>Acción</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                        `;

                        response.forEach(function (item) {
                            const estadoBadge = getEstadoBadge(item.estado);
                            const puedeAnular = item.estado === 'PENDIENTE';
                            const botonAnular = puedeAnular ?
                                `<button class="btn btn-sm btn-outline-danger" onclick="anularItemIndividual(${item.id}, '${item.itemCodigo}', ${item.cantidad})">
                                                    <i class="fas fa-times"></i> Anular
                                                </button>` :
                                '<span class="text-muted">No disponible</span>';

                            tablaItems += `
                                                <tr>
                                                    <td style="font-size: 0.85em;">${item.itemCodigo}</td>
                                                    <td>${item.itemDescripcion || ''}</td>
                                                    <td>${item.cantidad}</td>
                                                    <td>${estadoBadge}</td>
                                                    <td>${botonAnular}</td>
                                                </tr>
                                            `;
                        });

                        tablaItems += `
                                                    </tbody>
                                                </table>
                                            </div>
                                            <div class="mt-3 text-center">
                                                <button class="btn btn-danger" onclick="anularPedidoCompleto(${numeroPedido})">
                                                    <i class="fas fa-times-circle"></i> Anular Pedido Completo
                                                </button>
                                            </div>
                                        `;

                        Swal.fire({
                            title: `Ítems del Pedido N° ${numeroPedido}`,
                            html: tablaItems,
                            width: '900px',
                            showConfirmButton: false,
                            showCancelButton: true,
                            cancelButtonText: 'Cerrar'
                        });
                    } else {
                        Swal.fire({
                            title: 'Pedido no encontrado',
                            text: `No se encontraron ítems para el pedido N° ${numeroPedido}`,
                            icon: 'warning'
                        });
                    }
                },
                error: function (xhr, status, errorThrown) {
                    let mensaje = 'Error al buscar el pedido';
                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        mensaje = xhr.responseJSON.message;
                    }
                    Swal.fire({
                        title: 'Error',
                        text: mensaje,
                        icon: 'error'
                    });
                }
            });
        }

        // Función para anular un ítem individual
        function anularItemIndividual(itemId, codigoItem, cantidad) {
            Swal.fire({
                title: '¿Confirmar anulación?',
                text: `¿Desea anular el ítem ${codigoItem} (Cantidad: ${cantidad})?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Sí, anular ítem',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/api/pedido/anular-item/${itemId}`,
                        type: 'PUT',
                        success: function (response) {
                            Swal.fire({
                                title: '¡Ítem Anulado!',
                                text: `El ítem ${codigoItem} ha sido anulado correctamente.`,
                                icon: 'success',
                                timer: 2000,
                                showConfirmButton: false
                            });
                            cargarPedidos(); // Recargar la lista
                            // Notificar cambio para otras ventanas
                            localStorage.setItem('ultimoMovimientoStock', new Date().getTime());
                            Swal.close(); // Cerrar el modal de ítems
                        },
                        error: function (xhr, status, errorThrown) {
                            let mensaje = 'Error al anular el ítem';
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                mensaje = xhr.responseJSON.message;
                            }
                            Swal.fire({
                                title: 'Error',
                                text: mensaje,
                                icon: 'error'
                            });
                        }
                    });
                }
            });
        }

        // Función para anular pedido completo
        function anularPedidoCompleto(numeroPedido) {
            Swal.fire({
                title: '¿Confirmar anulación completa?',
                text: `¿Desea anular TODOS los ítems del pedido N° ${numeroPedido}? Esta acción no se puede deshacer.`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Sí, anular todo',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/api/pedido/anular/${numeroPedido}`,
                        type: 'PUT',
                        success: function (response) {
                            Swal.fire({
                                title: '¡Pedido Anulado!',
                                text: `El pedido N° ${numeroPedido} ha sido anulado completamente.`,
                                icon: 'success',
                                timer: 2000,
                                showConfirmButton: false
                            });
                            cargarPedidos(); // Recargar la lista
                            // Notificar cambio para otras ventanas
                            localStorage.setItem('ultimoMovimientoStock', new Date().getTime());
                        },
                        error: function (xhr, status, errorThrown) {
                            let mensaje = 'Error al anular el pedido';
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                mensaje = xhr.responseJSON.message;
                            }
                            Swal.fire({
                                title: 'Error',
                                text: mensaje,
                                icon: 'error'
                            });
                        }
                    });
                }
            });
        }

        // Sistema de actualización automática inteligente
        let ultimoMovimientoStock = localStorage.getItem('ultimoMovimientoStock') || '0';
        
        function verificarActualizaciones() {
            const nuevoMovimiento = localStorage.getItem('ultimoMovimientoStock') || '0';
            if (nuevoMovimiento !== ultimoMovimientoStock) {
                ultimoMovimientoStock = nuevoMovimiento;
                // Recargar la lista manteniendo la página actual
                cargarPedidos(paginaActualP);
            }
        }
        
        // Verificar actualizaciones cada 3 segundos
        setInterval(verificarActualizaciones, 3000);
    </script>
}
