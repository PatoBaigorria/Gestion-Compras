@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Lista de Pedidos";
}

<div class="container-custom mt-1">
    <div class="row">
        <div class="col-md-6">
            <h3 class="mb-3">Lista de Pedidos</h3>
        </div>
        <div class="col-md-6 text-end">
            @if (User.IsInRole("Administrador"))
            {
                <a href="/Pedido/Nuevo" class="btn btn-primary btn-sm">
                    <i class="fas fa-plus"></i> Generar Pedido
                </a>
                <button type="button" class="btn btn-danger btn-sm" onclick="anularPedido()">
                    <i class="fas fa-times"></i> Anular Pedido
                </button>
            }
        </div>
    </div>

    <!-- Filtros -->
    <div class="card shadow mb-2 card-filtros">
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <label for="filtroGeneral" class="form-label">Filtro General:</label>
                    <input type="text" class="form-control" id="filtroGeneral"
                        placeholder="Buscar en todos los campos..." onkeyup="filtrarTabla()">
                </div>
                <div class="col-md-6">
                    <label class="form-label">Filtrar por Estado:</label>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="filtroPendiente"
                                    onchange="filtrarTabla()" checked>
                                <label class="form-check-label" for="filtroPendiente">
                                    Pendiente
                                </label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="filtroCompletado"
                                    onchange="filtrarTabla()" checked>
                                <label class="form-check-label" for="filtroCompletado">
                                    Completado
                                </label>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="filtroAnulado"
                                    onchange="filtrarTabla()" checked>
                                <label class="form-check-label" for="filtroAnulado">
                                    Cancelado
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabla de Pedidos -->
    <div class="card shadow mb-0">
        <div class="card-body">
            <div class="table-responsive" style="max-height:600px; overflow-y:auto;">
                <table class="table table-striped table-bordered table-hover text-center table-sm" id="tablaPedidos">
                    <thead class="table-light sticky-header">
                        <tr>
                            <th style="width: 60px;">N° Pedido</th>
                            <th style="width: 80px;">Fecha</th>
                            <th style="width: 80px;">Código Item</th>
                            <th style="width: 400px;">Descripción</th>
                            <th style="width: 0px;">Unidad Medida</th>
                            <th style="width: 80px;">Cantidad</th>
                            <th style="width: 80px;">Pendiente</th>
                            <th style="width: 70px;">Recibido</th>
                            <th style="width: 160px;">Subfamilia</th>
                            <th style="width: 90px;">Estado</th>
                            <th style="width: 180px;">Usuario</th>
                        </tr>
                    </thead>
                    <tbody id="listaPedidos">
                        <!-- Los pedidos se cargarán aquí -->
                    </tbody>
                </table>
            </div>
            <!-- Controles de paginación -->
            <div id="paginacionPedidos" class="d-flex justify-content-center mt-2">
                <nav>
                    <ul class="pagination pagination-sm">
                        <li class="page-item" id="btnAnteriorPedidos">
                            <a class="page-link" href="#" onclick="cambiarPaginaPedidos(-1); return false;">← Anterior</a>
                        </li>
                        <li class="page-item"><span class="page-link text-muted" id="infoPaginaPedidos">Página 1 de 1</span></li>
                        <li class="page-item" id="btnSiguientePedidos">
                            <a class="page-link" href="#" onclick="cambiarPaginaPedidos(1); return false;">Siguiente →</a>
                        </li>
                    </ul>
                </nav>
                <div class="ms-3">
                    <select id="tamanoPaginaPedidos" class="form-select form-select-sm">
                        <option value="50">50</option>
                        <option value="100" selected>100</option>
                        <option value="200">200</option>
                    </select>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .container-custom {
        width: 100%;
        padding-right: 15px;
        padding-left: 15px;
        margin-right: auto;
        margin-left: auto;
        max-width: 1400px;
        padding-bottom: 0rem;
    }

    .container-custom>.card:last-child {
        margin-bottom: 0rem;
        /* o incluso 0 */
    }


    /* Encabezado fijo en tablas */
    .sticky-header th {
        position: sticky;
        top: 0;
        z-index: 10;
        background-color: #f8f9fa;
        /* color de .table-light */
    }

    .card-filtros .card-body {
        padding: 0.5rem 1rem;
        /* menos espacio interno */
    }

    .card-filtros label {
        font-size: 0.85rem;
        /* achica las etiquetas */
        margin-bottom: 0.25rem;
    }

    .card-filtros .form-control,
    .card-filtros .form-check-label {
        font-size: 0.85rem;
        /* controles más chicos */
    }

    .table-sm td,
    .table-sm th {
        font-size: 0.9em;
        text-align: center;
        vertical-align: middle;
    }
    /* Descripción (4ta columna) a la izquierda */
    #tablaPedidos tbody tr td:nth-child(4) {
        text-align: left;
    }
</style>

@section Scripts {
    <script>
        $(document).ready(function () {
            cargarPedidos(1);
        });

        let paginaActualP = 1;
        let totalPaginasP = 1;
        let tamanoPaginaP = 100;

        function cargarPedidos(pagina = 1) {
            $.ajax({
                url: '/api/pedido/list',
                type: 'GET',
                data: { pagina: pagina, tamanoPagina: tamanoPaginaP },
                success: function (response) {
                    const tbody = $('#listaPedidos');
                    tbody.empty();
                    const items = (response && response.items) ? response.items : [];
                    paginaActualP = response && response.pagina ? response.pagina : 1;
                    tamanoPaginaP = response && response.tamanoPagina ? response.tamanoPagina : tamanoPaginaP;
                    const total = response && typeof response.total === 'number' ? response.total : items.length;
                    totalPaginasP = Math.max(1, Math.ceil(total / tamanoPaginaP));

                    if (items.length > 0) {
                        $.each(items, function (index, pedido) {
                            const estadoBadge = getEstadoBadge(pedido.estado);
                            // Corregir formato de fecha - agregar tiempo para evitar problemas de zona horaria
                            const fecha = new Date(pedido.fechaPedido + 'T00:00:00').toLocaleDateString('es-ES');

                            tbody.append(`
                                                <tr>
                                                    <td>${pedido.numeroPedido}</td>
                                                    <td>${fecha}</td>
                                                    <td>${pedido.itemCodigo || ''}</td>
                                                    <td>${pedido.itemDescripcion || ''}</td>
                                                    <td>${pedido.unidadMedida || ''}</td>
                                                    <td>${pedido.cantidad}</td>
                                                    <td>${pedido.estado === 'CANCELADO' ? 0 : (pedido.cantidad - pedido.recibido)}</td>
                                                    <td>${pedido.recibido}</td>
                                                    <td>${pedido.subFamilia || ''}</td>
                                                    <td>${estadoBadge}</td>
                                                    <td>${pedido.usuario || ''}</td>
                                                </tr>
                                            `);
                        });

                        // Aplicar filtros después de cargar los datos
                        filtrarTabla();
                        actualizarPaginacionPedidos(total);
                    } else {
                        tbody.append(`
                                            <tr>
                                                <td colspan="11" class="text-center text-muted">
                                                    <i class="fas fa-info-circle"></i> No se encontraron pedidos
                                                </td>
                                            </tr>
                                        `);
                        actualizarPaginacionPedidos(0);
                    }
                },
                error: function (xhr, status, errorThrown) {
                    console.error('Error al cargar pedidos:', xhr.responseText);
                    $('#listaPedidos').html(`
                                        <tr>
                                            <td colspan="10" class="text-center text-danger">
                                                <i class="fas fa-exclamation-triangle"></i> Error al cargar los pedidos
                                            </td>
                                        </tr>
                                    `);
                }
            });
        }

        // Paginación
        function actualizarPaginacionPedidos(total) {
            $('#infoPaginaPedidos').text(`Página ${paginaActualP} de ${totalPaginasP} (${total} pedidos)`);
            $('#btnAnteriorPedidos').toggleClass('disabled', paginaActualP <= 1);
            $('#btnSiguientePedidos').toggleClass('disabled', paginaActualP >= totalPaginasP);
        }

        window.cambiarPaginaPedidos = function (delta) {
            const nueva = paginaActualP + delta;
            if (nueva >= 1 && nueva <= totalPaginasP) {
                cargarPedidos(nueva);
            }
        }

        $('#tamanoPaginaPedidos').on('change', function() {
            tamanoPaginaP = parseInt($(this).val(), 10) || 100;
            cargarPedidos(1);
        });

        function getEstadoBadge(estado) {
            switch (estado) {
                case 'PENDIENTE':
                    return '<span class="badge bg-warning text-dark">PENDIENTE</span>';
                case 'RECIBIDO':
                    return '<span class="badge bg-success">RECIBIDO</span>';
                case 'COMPLETADO':
                    return '<span class="badge bg-success">COMPLETADO</span>';
                case 'CANCELADO':
                    return '<span class="badge bg-danger">CANCELADO</span>';
                default:
                    return '<span class="badge bg-secondary">' + estado + '</span>';
            }
        }

        // Función para filtrar la tabla
        function filtrarTabla() {
            const filtroGeneral = document.getElementById('filtroGeneral').value.toLowerCase();
            const filtroPendiente = document.getElementById('filtroPendiente').checked;
            const filtroCompletado = document.getElementById('filtroCompletado').checked;
            const filtroAnulado = document.getElementById('filtroAnulado').checked;
            const filas = document.querySelectorAll('#listaPedidos tr');

            filas.forEach(function (fila) {
                // Obtener el texto de todas las celdas de la fila
                const textoFila = fila.textContent.toLowerCase();

                // Verificar filtro general
                const cumpleFiltroGeneral = filtroGeneral === '' || textoFila.includes(filtroGeneral);

                // Verificar filtro de estado
                let cumpleFiltroEstado = false;
                const estadoCell = fila.querySelector('td:nth-child(10)'); // Columna de estado
                if (estadoCell) {
                    const estado = estadoCell.textContent.toUpperCase();

                    // Verificar cada tipo de estado
                    if (filtroPendiente && estado.includes('PENDIENTE')) {
                        cumpleFiltroEstado = true;
                    }
                    if (filtroCompletado && (estado.includes('COMPLETADO') || estado.includes('RECIBIDO'))) {
                        cumpleFiltroEstado = true;
                    }
                    if (filtroAnulado && (estado.includes('CANCELADO') || estado.includes('ANULADO'))) {
                        cumpleFiltroEstado = true;
                    }
                } else {
                    // Si no hay celda de estado, mostrar si al menos un filtro está activo
                    cumpleFiltroEstado = filtroPendiente || filtroCompletado || filtroAnulado;
                }

                // Mostrar u ocultar fila
                if (cumpleFiltroGeneral && cumpleFiltroEstado) {
                    fila.style.display = '';
                } else {
                    fila.style.display = 'none';
                }
            });
        }

        // Función para anular pedido
        function anularPedido() {
            mostrarModalAnularPedido();
        }

        // Función separada para mostrar el modal de anular pedido
        function mostrarModalAnularPedido() {
            Swal.fire({
                title: 'Anular Pedido',
                text: 'Ingrese el número de pedido:',
                input: 'number',
                inputAttributes: {
                    min: 1,
                    step: 1
                },
                showCancelButton: true,
                confirmButtonText: 'Buscar',
                cancelButtonText: 'Cancelar',
                confirmButtonColor: '#007bff',
                inputValidator: (value) => {
                    if (!value || value <= 0) {
                        return 'Debe ingresar un número de pedido válido';
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const numeroPedido = result.value;
                    mostrarItemsPedido(numeroPedido);
                }
            });
        }

        // Función para mostrar los ítems del pedido
        function mostrarItemsPedido(numeroPedido) {
            $.ajax({
                url: `/api/pedido/items/${numeroPedido}`,
                type: 'GET',
                success: function (response) {
                    if (response && response.length > 0) {
                        // Verificar si todos los ítems están anulados
                        const todosAnulados = response.every(item => item.estado === 'CANCELADO');
                        if (todosAnulados) {
                            Swal.fire({
                                title: 'Pedido Anulado',
                                text: `El pedido N° ${numeroPedido} ya está completamente anulado`,
                                icon: 'info',
                                confirmButtonText: 'Buscar otro pedido'
                            }).then(() => {
                                // Volver a mostrar el modal de búsqueda
                                mostrarModalAnularPedido();
                            });
                            return;
                        }
                        let tablaItems = `
                                            <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                                                <table class="table table-sm table-striped">
                                                    <thead class="table-light">
                                                        <tr>
                                                            <th>Código</th>
                                                            <th>Descripción</th>
                                                            <th>Cantidad</th>
                                                            <th>Estado</th>
                                                            <th>Acción</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                        `;

                        response.forEach(function (item) {
                            const estadoBadge = getEstadoBadge(item.estado);
                            const puedeAnular = item.estado === 'PENDIENTE';
                            const botonAnular = puedeAnular ?
                                `<button class="btn btn-sm btn-outline-danger" onclick="anularItemIndividual(${item.id}, '${item.itemCodigo}', ${item.cantidad})">
                                                    <i class="fas fa-times"></i> Anular
                                                </button>` :
                                '<span class="text-muted">No disponible</span>';

                            tablaItems += `
                                                <tr>
                                                    <td style="font-size: 0.85em;">${item.itemCodigo}</td>
                                                    <td>${item.itemDescripcion || ''}</td>
                                                    <td>${item.cantidad}</td>
                                                    <td>${estadoBadge}</td>
                                                    <td>${botonAnular}</td>
                                                </tr>
                                            `;
                        });

                        tablaItems += `
                                                    </tbody>
                                                </table>
                                            </div>
                                            <div class="mt-3 text-center">
                                                <button class="btn btn-danger" onclick="anularPedidoCompleto(${numeroPedido})">
                                                    <i class="fas fa-times-circle"></i> Anular Pedido Completo
                                                </button>
                                            </div>
                                        `;

                        Swal.fire({
                            title: `Ítems del Pedido N° ${numeroPedido}`,
                            html: tablaItems,
                            width: '900px',
                            showConfirmButton: false,
                            showCancelButton: true,
                            cancelButtonText: 'Cerrar'
                        });
                    } else {
                        Swal.fire({
                            title: 'Pedido no encontrado',
                            text: `No se encontraron ítems para el pedido N° ${numeroPedido}`,
                            icon: 'warning'
                        });
                    }
                },
                error: function (xhr, status, errorThrown) {
                    let mensaje = 'Error al buscar el pedido';
                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        mensaje = xhr.responseJSON.message;
                    }
                    Swal.fire({
                        title: 'Error',
                        text: mensaje,
                        icon: 'error'
                    });
                }
            });
        }

        // Función para anular un ítem individual
        function anularItemIndividual(itemId, codigoItem, cantidad) {
            Swal.fire({
                title: '¿Confirmar anulación?',
                text: `¿Desea anular el ítem ${codigoItem} (Cantidad: ${cantidad})?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Sí, anular ítem',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/api/pedido/anular-item/${itemId}`,
                        type: 'PUT',
                        success: function (response) {
                            Swal.fire({
                                title: '¡Ítem Anulado!',
                                text: `El ítem ${codigoItem} ha sido anulado correctamente.`,
                                icon: 'success',
                                timer: 2000,
                                showConfirmButton: false
                            });
                            cargarPedidos(); // Recargar la lista
                            // Notificar cambio para otras ventanas
                            localStorage.setItem('ultimoMovimientoStock', new Date().getTime());
                            Swal.close(); // Cerrar el modal de ítems
                        },
                        error: function (xhr, status, errorThrown) {
                            let mensaje = 'Error al anular el ítem';
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                mensaje = xhr.responseJSON.message;
                            }
                            Swal.fire({
                                title: 'Error',
                                text: mensaje,
                                icon: 'error'
                            });
                        }
                    });
                }
            });
        }

        // Función para anular pedido completo
        function anularPedidoCompleto(numeroPedido) {
            Swal.fire({
                title: '¿Confirmar anulación completa?',
                text: `¿Desea anular TODOS los ítems del pedido N° ${numeroPedido}? Esta acción no se puede deshacer.`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Sí, anular todo',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/api/pedido/anular/${numeroPedido}`,
                        type: 'PUT',
                        success: function (response) {
                            Swal.fire({
                                title: '¡Pedido Anulado!',
                                text: `El pedido N° ${numeroPedido} ha sido anulado completamente.`,
                                icon: 'success',
                                timer: 2000,
                                showConfirmButton: false
                            });
                            cargarPedidos(); // Recargar la lista
                            // Notificar cambio para otras ventanas
                            localStorage.setItem('ultimoMovimientoStock', new Date().getTime());
                        },
                        error: function (xhr, status, errorThrown) {
                            let mensaje = 'Error al anular el pedido';
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                mensaje = xhr.responseJSON.message;
                            }
                            Swal.fire({
                                title: 'Error',
                                text: mensaje,
                                icon: 'error'
                            });
                        }
                    });
                }
            });
        }

        // Actualizar lista automáticamente cada 5 segundos
        setInterval(function () {
            cargarPedidos();
        }, 5000);
    </script>
}
