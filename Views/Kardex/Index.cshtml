@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Kardex de Movimientos";
}

<style>
    .container-custom {
        width: 100%;
        padding-right: 15px;
        padding-left: 15px;
        margin-right: auto;
        margin-left: auto;
        max-width: 1400px;
    }

    .card {
        border: none;
        border-radius: 8px;
    }

    .card-header {
        border-bottom: 1px solid #dee2e6;
        font-weight: 500;
    }

    .card-filtros .card-title {
        color: #495057;
        font-size: 1.1rem;
    }
</style>

<div class="container-custom mt-3">

<!-- Card de Filtros y Botones (estilo Pedidos) -->
<div class="card shadow mb-2 card-filtros">
  <div class="card-body">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h5 class="card-title mb-0">
        <i class="fas fa-exchange-alt me-2"></i>Kardex
      </h5>
    </div>
    <div class="row g-2 align-items-end">
      <div class="col-md-1">
        <label for="codigoItem" class="form-label">Código</label>
        <input type="text" id="codigoItem" class="form-control" maxlength="10"/>
      </div>
      <div class="col-md-4">
        <label for="descripcionItem" class="form-label">Descripción</label>
        <input type="text" id="descripcionItem" class="form-control"/>
      </div>
      <div class="col-md-2">
        <label for="fechaRegistro" class="form-label">Fecha Registro</label>
        <input type="date" id="fechaRegistro" class="form-control"/>
      </div>
      <div class="col-md-2">
        <label for="fechaMovimiento" class="form-label">Fecha Movimiento</label>
        <input type="date" id="fechaMovimiento" class="form-control"/>
      </div>
      <div class="col-md-2">
        <label for="tipoMovimiento" class="form-label">Tipo Movimiento</label>
        <select id="tipoMovimiento" class="form-select form-select-sm">
            <option value="">Todos</option>
            <option value="Ingreso">Ingreso</option>
            <option value="Salida">Salida</option>
            <option value="Ajuste">Ajuste</option>
            <option value="Devolucion">Devolucion</option>
        </select>
      </div>
      <div class="col-md-1 d-flex align-items-end">
          <button type="button" class="btn btn-primary btn-sm px-2" id="buscarKardexBtn">
              <i class="fas fa-search"></i>
          </button>
      </div>
    </div>
  </div>
</div>

<!-- Card de Resultados -->
<div class="card shadow mb-0">
  <div class="card-header bg-light d-flex align-items-center justify-content-between">
    <strong>Movimientos</strong>
    <div class="d-flex align-items-center gap-2">
        <nav>
            <ul class="pagination pagination-sm mb-0">
                <li class="page-item" id="btnAnteriorKardex">
                    <a class="page-link" href="#" onclick="cambiarPaginaKardex(-1); return false;">← Anterior</a>
                </li>
                <li class="page-item"><span class="page-link text-muted" id="infoPaginaKardex">Página 1 de 1</span></li>
                <li class="page-item" id="btnSiguienteKardex">
                    <a class="page-link" href="#" onclick="cambiarPaginaKardex(1); return false;">Siguiente →</a>
                </li>
            </ul>
        </nav>
        <select id="tamanoPaginaKardex" class="form-select form-select-sm" style="width: auto;">
            <option value="50">50</option>
            <option value="100" selected>100</option>
            <option value="200">200</option>
        </select>
    </div>
  </div>
  <div class="card-body p-0">
    <div class="table-responsive" style="height: 600px; overflow-y: auto;">
        <table id="dataTable" class="table table-striped table-bordered table-sm mb-0">
            <thead class="table-header">
                <tr>
                    <th style="width: 120px; text-align: center; cursor: pointer;" onclick="ordenarPor('fechaRegistro')">
                        Fecha Registro <i id="icon-fechaRegistro" class="fas fa-sort"></i>
                    </th>
                    <th style="width: 100px; text-align: center; cursor: pointer;" onclick="ordenarPor('fechaMovimiento')">
                        Fecha Movimiento <i id="icon-fechaMovimiento" class="fas fa-sort"></i>
                    </th>
                    <th style="width: 50px; text-align: center;">Código</th>
                    <th style="width: 45%; text-align: center;">Descripción</th>
                    <th style="width: 100px; text-align: center;">Tipo Movimiento</th>
                    <th style="width: 50px; text-align: center;">Stock Inicial</th>
                    <th style="width: 120px; text-align: center;">Cantidad Ingreso/Salida</th>
                    <th style="width: 50px; text-align: center;">Stock Final</th>
                    <th style="width: 180px; text-align: center;">Usuario</th>
                </tr>
            </thead>
            <tbody id="resultadosKardex">
                <!-- Resultados irán aquí -->
            </tbody>
        </table>
    </div>
  </div>
  
</div>

<style>
    .table-responsive {
        position: relative;
    }

    .table-header {
        position: sticky;
        top: 0;
        z-index: 1020;
        background-color: white;
    }

    /* Estilos de filtros como en Pedidos */
    .card-filtros .card-body {
        padding: 0.5rem 1rem; /* menos espacio interno */
    }
    .card-filtros label {
        font-size: 0.85rem; /* achica etiquetas */
        margin-bottom: 0.25rem;
    }
    .card-filtros .form-control,
    .card-filtros .form-check-label,
    .card-filtros .form-select {
        font-size: 0.85rem; /* controles más chicos */
    }

    .tipo-ingreso {
        color: #28a745;
        font-weight: bold;
    }

    .tipo-salida {
        color: #dc3545;
        font-weight: bold;
    }

    .tipo-ajuste {
        color: #ffc107;
        font-weight: bold;
    }

    /* Nueva clase para devoluciones (azul) */
    .tipo-devolucion {
        color: #0d6efd; /* Bootstrap primary */
        font-weight: bold;
    }

    .cantidad-positiva {
        color: #28a745;
    }

    .cantidad-negativa {
        color: #dc3545;
    }

    .sortable-header {
        cursor: pointer;
        user-select: none;
    }

    .sortable-header:hover {
        background-color: #f8f9fa;
    }

    /* Unificar estilo en listas: tamaño y centrado */
    .table-sm td,
    .table-sm th {
        font-size: 0.9em;
        text-align: center;
        vertical-align: middle;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const buscarBtn = document.getElementById('buscarKardexBtn');
        const resultadosContainer = document.getElementById('resultadosKardex');
        let paginaActualK = 1;
        let totalPaginasK = 1;
        let tamanoPaginaK = 100;

        // Utilidad: debounce para evitar múltiples llamadas mientras se escribe
        function debounce(fn, delay) {
            let t;
            return function (...args) {
                clearTimeout(t);
                t = setTimeout(() => fn.apply(this, args), delay);
            }
        }

        // Función para buscar movimientos de kardex
        async function buscarKardex(page = 1) {
            const codigo = document.getElementById('codigoItem').value;
            const descripcion = document.getElementById('descripcionItem').value;
            const fechaRegistro = document.getElementById('fechaRegistro').value;
            const fechaMovimiento = document.getElementById('fechaMovimiento').value;
            const tipoMovimiento = document.getElementById('tipoMovimiento').value;

            const params = new URLSearchParams();
            if (codigo) params.append('codigo', codigo);
            if (descripcion) params.append('descripcion', descripcion);
            if (fechaRegistro) params.append('fechaDesde', fechaRegistro);
            if (fechaMovimiento) params.append('fechaVale', fechaMovimiento);
            if (tipoMovimiento) params.append('tipoMovimiento', tipoMovimiento);
            params.append('pagina', page);
            params.append('tamanoPagina', tamanoPaginaK);

            try {
                const response = await fetch(`/Kardex/BuscarKardex?${params.toString()}`);
                
                // Si la respuesta es una redirección al login (401 o 302)
                if (response.redirected && response.url.includes('/Autenticacion/Login')) {
                    window.location.href = '/Autenticacion/Login';
                    return;
                }
                
                if (!response.ok) {
                    throw new Error('Error en la búsqueda');
                }

                const data = await response.json();
                const movimientos = data.items || [];
                paginaActualK = data.pagina || 1;
                tamanoPaginaK = data.tamanoPagina || tamanoPaginaK;
                totalPaginasK = Math.max(1, Math.ceil((data.total || movimientos.length) / tamanoPaginaK));

                mostrarResultados(movimientos);
                actualizarPaginacionKardex(data.total || movimientos.length);
            } catch (error) {
                console.error('Error:', error);
                // Si el error es por JSON inválido (probablemente HTML del login)
                if (error.message.includes('JSON')) {
                    window.location.href = '/Autenticacion/Login';
                    return;
                }
                resultadosContainer.innerHTML = '<tr><td colspan="9" class="text-center text-danger">Error al cargar los datos. Por favor, recarga la página.</td></tr>';
            }
        }

        // Función para mostrar los resultados en la tabla
        function mostrarResultados(movimientos) {
            resultadosContainer.innerHTML = '';

            if (movimientos.length === 0) {
                resultadosContainer.innerHTML = '<tr><td colspan="9" class="text-center">No se encontraron movimientos</td></tr>';
                return;
            }

            movimientos.forEach(mov => {
                const tipoClass = getTipoMovimientoClass(mov.tipoMovimiento);
                const cantidadClass = parseFloat(mov.cantidadMovimiento) < 0 ? 'cantidad-negativa' : 'cantidad-positiva';

                const row = `
                    <tr>
                        <td class="text-center">${mov.fechaRegistro}</td>
                        <td class="text-center">${mov.fechaMovimiento}</td>
                        <td class="text-center">${mov.codigo || ''}</td>
                        <td style="text-align: left;">${mov.descripcion || ''}</td>
                        <td class="text-center"><span class="${tipoClass}">${(mov.tipoMovimiento || '').toUpperCase()}</span></td>
                        <td class="text-center">${mov.stockInicial !== null ? formatearNumero(parseFloat(mov.stockInicial)) : ''}</td>
                        <td class="text-center"><span class="${cantidadClass}">${formatearNumero(parseFloat(mov.cantidadMovimiento))}</span></td>
                        <td class="text-center"><strong>${mov.stockFinal !== null ? formatearNumero(parseFloat(mov.stockFinal)) : ''}</strong></td>
                        <td class="text-center">${mov.usuario || ''}</td>
                    </tr>
                `;
                resultadosContainer.insertAdjacentHTML('beforeend', row);
            });
        }
        // Función para formatear números (mostrar decimales solo si existen)
        function formatearNumero(num) {
            return num % 1 === 0 ? num.toFixed(0) : num.toFixed(2);
        }

        function getTipoMovimientoClass(tipo) {
            switch (tipo?.toLowerCase()) {
                case 'ingreso':
                    return 'badge rounded-pill bg-success';
                case 'salida':
                    return 'badge rounded-pill bg-danger';
                case 'ajuste':
                    return 'badge rounded-pill bg-warning text-dark';
                case 'devolucion':
                    return 'badge rounded-pill bg-primary';
                default:
                    return 'badge rounded-pill bg-secondary';
            }
        }

        // Event listeners
        buscarBtn.addEventListener('click', () => buscarKardex(1));

        // Búsqueda en vivo al escribir en Código y Descripción
        const onInputDebounced = debounce(() => buscarKardex(1), 400);
        document.getElementById('codigoItem').addEventListener('input', onInputDebounced);
        document.getElementById('descripcionItem').addEventListener('input', onInputDebounced);

        // Buscar al presionar Enter en cualquier campo de filtro
        document.querySelectorAll('#codigoItem, #descripcionItem, #fechaRegistro, #fechaMovimiento').forEach(input => {
            input.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    buscarKardex(1);
                }
            });
        });

        // Buscar al cambiar las fechas
        document.getElementById('fechaRegistro').addEventListener('change', () => buscarKardex(1));
        document.getElementById('fechaMovimiento').addEventListener('change', () => buscarKardex(1));

        // Buscar al cambiar el select de tipo de movimiento
        document.getElementById('tipoMovimiento').addEventListener('change', () => buscarKardex(1));

        // Variables para el ordenamiento
        let movimientosOriginales = [];
        let ordenActual = { campo: 'fechaRegistro', direccion: 'desc' };

        // Función para ordenar por columna
        window.ordenarPor = function(campo) {
            // Cambiar dirección si es la misma columna, sino usar descendente por defecto
            if (ordenActual.campo === campo) {
                ordenActual.direccion = ordenActual.direccion === 'asc' ? 'desc' : 'asc';
            } else {
                ordenActual.campo = campo;
                ordenActual.direccion = 'desc';
            }

            // Actualizar iconos
            actualizarIconosOrdenamiento();

            // Ordenar y mostrar
            const movimientosOrdenados = [...movimientosOriginales].sort((a, b) => {
                let valorA, valorB;
                
                if (campo === 'fechaRegistro') {
                    valorA = new Date(a.fechaRegistro.split(' ')[0].split('/').reverse().join('-'));
                    valorB = new Date(b.fechaRegistro.split(' ')[0].split('/').reverse().join('-'));
                } else if (campo === 'fechaMovimiento') {
                    valorA = a.fechaMovimiento ? new Date(a.fechaMovimiento.split('/').reverse().join('-')) : new Date(0);
                    valorB = b.fechaMovimiento ? new Date(b.fechaMovimiento.split('/').reverse().join('-')) : new Date(0);
                }

                if (ordenActual.direccion === 'asc') {
                    return valorA - valorB;
                } else {
                    return valorB - valorA;
                }
            });

            mostrarResultados(movimientosOrdenados);
        };

        // Función para actualizar iconos de ordenamiento
        function actualizarIconosOrdenamiento() {
            // Resetear todos los iconos
            document.querySelectorAll('[id^="icon-"]').forEach(icon => {
                icon.className = 'fas fa-sort';
            });

            // Actualizar el icono de la columna actual
            const iconoActual = document.getElementById(`icon-${ordenActual.campo}`);
            if (iconoActual) {
                iconoActual.className = ordenActual.direccion === 'asc' ? 'fas fa-sort-up' : 'fas fa-sort-down';
            }
        }

        // Modificar la función mostrarResultados para guardar los datos originales
        const mostrarResultadosOriginal = mostrarResultados;
        mostrarResultados = function(movimientos) {
            movimientosOriginales = movimientos;
            mostrarResultadosOriginal(movimientos);
            actualizarIconosOrdenamiento();
        };

        // Paginación Kardex
        function actualizarPaginacionKardex(total) {
            document.getElementById('infoPaginaKardex').textContent = `Página ${paginaActualK} de ${totalPaginasK} (${total} movimientos)`;
            document.getElementById('btnAnteriorKardex').classList.toggle('disabled', paginaActualK <= 1);
            document.getElementById('btnSiguienteKardex').classList.toggle('disabled', paginaActualK >= totalPaginasK);
        }

        window.cambiarPaginaKardex = function (delta) {
            const nueva = paginaActualK + delta;
            if (nueva >= 1 && nueva <= totalPaginasK) {
                buscarKardex(nueva);
            }
        }

        document.getElementById('tamanoPaginaKardex').addEventListener('change', function() {
            tamanoPaginaK = parseInt(this.value, 10) || 100;
            buscarKardex(1);
        });

        // Función para refrescar automáticamente el Kardex
        function refrescarKardex() {
            buscarKardex(paginaActualK);
        }

        // Exponer la función globalmente para que otras ventanas puedan llamarla
        window.refrescarKardex = refrescarKardex;

        // Verificar si hay otras ventanas abiertas cada 2 segundos
        setInterval(function() {
            // Verificar si hay cambios en localStorage que indiquen nuevos movimientos
            const ultimoMovimiento = localStorage.getItem('ultimoMovimientoKardex');
            const ultimoCheck = localStorage.getItem('ultimoCheckKardex') || '0';
            
            if (ultimoMovimiento && ultimoMovimiento !== ultimoCheck) {
                localStorage.setItem('ultimoCheckKardex', ultimoMovimiento);
                refrescarKardex();
            }
        }, 2000);

        // Cargar todos los movimientos al inicio
        buscarKardex(1);
    });
</script>

</div>
